//------------------------------------------------------------------------------
// <auto-generated>
//    此代码是根据模板生成的。
//
//    手动更改此文件可能会导致应用程序中发生异常行为。
//    如果重新生成代码，则将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM 关系源元数据

[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_绑定账号表_用户表", "用户表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.用户表), "绑定账号表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.绑定账号表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_部门_部门", "部门表", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(LoveKaoExam.Data.部门表), "部门表1", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.部门表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_部门表_用户表", "用户表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.用户表), "部门表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.部门表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_用户表_部门表", "部门表", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(LoveKaoExam.Data.部门表), "用户表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.用户表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_会员单选题回答_会员考试回答", "考生考试回答表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.考生考试回答表), "考生单选题回答表", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(LoveKaoExam.Data.考生单选题回答表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_会员多空选择题回答_会员考试回答", "考生考试回答表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.考生考试回答表), "考生多空选择题回答表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.考生多空选择题回答表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_会员多空选择题回答_空格历史", "自由题空格表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.自由题空格表), "考生多空选择题回答表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.考生多空选择题回答表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_会员多空选择题回答_选项历史", "自由题选项表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.自由题选项表), "考生多空选择题回答表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.考生多空选择题回答表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_会员多选题回答_会员考试回答", "考生考试回答表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.考生考试回答表), "考生多选题回答表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.考生多选题回答表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_会员多选题回答_选项历史", "自由题选项表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.自由题选项表), "考生多选题回答表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.考生多选题回答表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_考生范围表_用户表", "用户表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.用户表), "考生范围表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.考生范围表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_会员考试回答_会员做过的试卷", "考生做过的试卷表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.考生做过的试卷表), "考生考试回答表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.考生考试回答表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_会员考试回答_试卷题目历史", "试卷大题中试题表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.试卷大题中试题表), "考生考试回答表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.考生考试回答表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_会员连线题回答_会员考试回答", "考生考试回答表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.考生考试回答表), "考生连线题回答表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.考生连线题回答表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_会员判断题回答_会员考试回答", "考生考试回答表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.考生考试回答表), "考生判断题回答表", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(LoveKaoExam.Data.考生判断题回答表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_会员填空题回答_会员考试回答", "考生考试回答表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.考生考试回答表), "考生填空题回答表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.考生填空题回答表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_会员问答题回答_会员考试回答", "考生考试回答表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.考生考试回答表), "考生问答题回答表", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(LoveKaoExam.Data.考生问答题回答表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_会员选词填空回答_会员考试回答", "考生考试回答表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.考生考试回答表), "考生选词填空回答表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.考生选词填空回答表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_会员连线题回答_连线题选项历史", "连线题选项表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.连线题选项表), "考生连线题回答表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.考生连线题回答表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_会员连线题回答_连线题选项历史1", "连线题选项表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.连线题选项表), "考生连线题回答表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.考生连线题回答表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_会员填空题回答表_自由题空格表", "自由题空格表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.自由题空格表), "考生填空题回答表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.考生填空题回答表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_会员选词填空回答_空格历史", "自由题空格表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.自由题空格表), "考生选词填空回答表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.考生选词填空回答表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_会员选词填空回答_选项历史", "自由题选项表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.自由题选项表), "考生选词填空回答表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.考生选词填空回答表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_会员做过的试卷表_用户表", "用户表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.用户表), "考生做过的试卷表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.考生做过的试卷表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_考试设置_试卷内容表", "试卷内容表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.试卷内容表), "考试设置表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.考试设置表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_考试设置表_用户表", "用户表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.用户表), "考试设置表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.考试设置表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_连线题答案历史_连线题选项历史", "连线题选项表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.连线题选项表), "连线题答案表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.连线题答案表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_连线题答案历史_连线题选项历史1", "连线题选项表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.连线题选项表), "连线题答案表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.连线题答案表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_连线题答案历史_题目历史", "试题内容表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.试题内容表), "连线题答案表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.连线题答案表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_连线题选项历史_题目历史", "试题内容表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.试题内容表), "连线题选项表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.连线题选项表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_练习设置表_试卷内容表", "试卷内容表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.试卷内容表), "练习设置表", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(LoveKaoExam.Data.练习设置表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_练习设置表_用户表", "用户表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.用户表), "练习设置表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.练习设置表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_判断题答案历史_题目历史", "试题内容表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.试题内容表), "判断题答案表", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(LoveKaoExam.Data.判断题答案表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_试卷大题中试题表_试题内容表", "试题内容表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.试题内容表), "试卷大题中试题表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.试卷大题中试题表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_试卷题目历史_试卷题型历史", "试卷中大题表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.试卷中大题表), "试卷大题中试题表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.试卷大题中试题表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_试卷历史_试卷", "试卷外部信息表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.试卷外部信息表), "试卷内容表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.试卷内容表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_试卷内容表_用户表", "用户表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.用户表), "试卷内容表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.试卷内容表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_试卷内容表_用户表1", "用户表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.用户表), "试卷内容表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.试卷内容表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_试卷中大题表_试卷内容表", "试卷内容表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.试卷内容表), "试卷中大题表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.试卷中大题表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_试卷外部信息表_用户表", "用户表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.用户表), "试卷外部信息表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.试卷外部信息表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_修改成绩记录_试卷", "试卷外部信息表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.试卷外部信息表), "修改成绩记录", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.修改成绩记录), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_空格历史_题目历史", "试题内容表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.试题内容表), "自由题空格表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.自由题空格表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_试题内容表_用户表", "用户表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.用户表), "试题内容表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.试题内容表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_题目历史_题目", "试题外部信息表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.试题外部信息表), "试题内容表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.试题内容表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_题目历史_题目历史", "试题内容表", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(LoveKaoExam.Data.试题内容表), "试题内容表1", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.试题内容表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_问答题答案历史_题目历史", "试题内容表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.试题内容表), "问答题答案表", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(LoveKaoExam.Data.问答题答案表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_试题外部信息表_用户表", "用户表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.用户表), "试题外部信息表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.试题外部信息表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_所属分类表_系统分类表", "系统分类表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.系统分类表), "所属分类表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.所属分类表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_系统分类表_用户表", "用户表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.用户表), "系统分类表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.系统分类表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_系统分类上下级关系表_系统分类表", "系统分类表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.系统分类表), "系统分类上下级关系表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.系统分类上下级关系表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_系统分类上下级关系表_系统分类表1", "系统分类表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.系统分类表), "系统分类上下级关系表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.系统分类上下级关系表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_空格答案历史_空格历史", "自由题空格表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.自由题空格表), "自由题选项空格答案表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.自由题选项空格答案表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_填空题答案历史_空格历史", "自由题空格表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.自由题空格表), "自由题填空答案表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.自由题填空答案表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_自由题空格表_自由题选项组表", "自由题选项组表", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(LoveKaoExam.Data.自由题选项组表), "自由题空格表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.自由题空格表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_空格答案历史_选项历史", "自由题选项表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.自由题选项表), "自由题选项空格答案表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.自由题选项空格答案表), true)]
[assembly: EdmRelationshipAttribute("LoveKaoExamModel", "FK_自由题选项表_自由题选项组表", "自由题选项组表", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LoveKaoExam.Data.自由题选项组表), "自由题选项表", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LoveKaoExam.Data.自由题选项表), true)]

#endregion

namespace LoveKaoExam.Data
{
    #region 上下文
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    public partial class LoveKaoExamEntities : ObjectContext
    {
        #region 构造函数
    
        /// <summary>
        /// 请使用应用程序配置文件的“LoveKaoExamEntities”部分中的连接字符串初始化新 LoveKaoExamEntities 对象。
        /// </summary>
        public LoveKaoExamEntities() : base("name=LoveKaoExamEntities", "LoveKaoExamEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// 初始化新的 LoveKaoExamEntities 对象。
        /// </summary>
        public LoveKaoExamEntities(string connectionString) : base(connectionString, "LoveKaoExamEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// 初始化新的 LoveKaoExamEntities 对象。
        /// </summary>
        public LoveKaoExamEntities(EntityConnection connection) : base(connection, "LoveKaoExamEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region 分部方法
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet 属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<sysdiagrams> sysdiagrams
        {
            get
            {
                if ((_sysdiagrams == null))
                {
                    _sysdiagrams = base.CreateObjectSet<sysdiagrams>("sysdiagrams");
                }
                return _sysdiagrams;
            }
        }
        private ObjectSet<sysdiagrams> _sysdiagrams;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<绑定账号表> 绑定账号表
        {
            get
            {
                if ((_绑定账号表 == null))
                {
                    _绑定账号表 = base.CreateObjectSet<绑定账号表>("绑定账号表");
                }
                return _绑定账号表;
            }
        }
        private ObjectSet<绑定账号表> _绑定账号表;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<部门表> 部门表
        {
            get
            {
                if ((_部门表 == null))
                {
                    _部门表 = base.CreateObjectSet<部门表>("部门表");
                }
                return _部门表;
            }
        }
        private ObjectSet<部门表> _部门表;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<考生单选题回答表> 考生单选题回答表
        {
            get
            {
                if ((_考生单选题回答表 == null))
                {
                    _考生单选题回答表 = base.CreateObjectSet<考生单选题回答表>("考生单选题回答表");
                }
                return _考生单选题回答表;
            }
        }
        private ObjectSet<考生单选题回答表> _考生单选题回答表;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<考生多空选择题回答表> 考生多空选择题回答表
        {
            get
            {
                if ((_考生多空选择题回答表 == null))
                {
                    _考生多空选择题回答表 = base.CreateObjectSet<考生多空选择题回答表>("考生多空选择题回答表");
                }
                return _考生多空选择题回答表;
            }
        }
        private ObjectSet<考生多空选择题回答表> _考生多空选择题回答表;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<考生多选题回答表> 考生多选题回答表
        {
            get
            {
                if ((_考生多选题回答表 == null))
                {
                    _考生多选题回答表 = base.CreateObjectSet<考生多选题回答表>("考生多选题回答表");
                }
                return _考生多选题回答表;
            }
        }
        private ObjectSet<考生多选题回答表> _考生多选题回答表;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<考生范围表> 考生范围表
        {
            get
            {
                if ((_考生范围表 == null))
                {
                    _考生范围表 = base.CreateObjectSet<考生范围表>("考生范围表");
                }
                return _考生范围表;
            }
        }
        private ObjectSet<考生范围表> _考生范围表;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<考生考试回答表> 考生考试回答表
        {
            get
            {
                if ((_考生考试回答表 == null))
                {
                    _考生考试回答表 = base.CreateObjectSet<考生考试回答表>("考生考试回答表");
                }
                return _考生考试回答表;
            }
        }
        private ObjectSet<考生考试回答表> _考生考试回答表;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<考生连线题回答表> 考生连线题回答表
        {
            get
            {
                if ((_考生连线题回答表 == null))
                {
                    _考生连线题回答表 = base.CreateObjectSet<考生连线题回答表>("考生连线题回答表");
                }
                return _考生连线题回答表;
            }
        }
        private ObjectSet<考生连线题回答表> _考生连线题回答表;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<考生判断题回答表> 考生判断题回答表
        {
            get
            {
                if ((_考生判断题回答表 == null))
                {
                    _考生判断题回答表 = base.CreateObjectSet<考生判断题回答表>("考生判断题回答表");
                }
                return _考生判断题回答表;
            }
        }
        private ObjectSet<考生判断题回答表> _考生判断题回答表;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<考生填空题回答表> 考生填空题回答表
        {
            get
            {
                if ((_考生填空题回答表 == null))
                {
                    _考生填空题回答表 = base.CreateObjectSet<考生填空题回答表>("考生填空题回答表");
                }
                return _考生填空题回答表;
            }
        }
        private ObjectSet<考生填空题回答表> _考生填空题回答表;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<考生问答题回答表> 考生问答题回答表
        {
            get
            {
                if ((_考生问答题回答表 == null))
                {
                    _考生问答题回答表 = base.CreateObjectSet<考生问答题回答表>("考生问答题回答表");
                }
                return _考生问答题回答表;
            }
        }
        private ObjectSet<考生问答题回答表> _考生问答题回答表;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<考生选词填空回答表> 考生选词填空回答表
        {
            get
            {
                if ((_考生选词填空回答表 == null))
                {
                    _考生选词填空回答表 = base.CreateObjectSet<考生选词填空回答表>("考生选词填空回答表");
                }
                return _考生选词填空回答表;
            }
        }
        private ObjectSet<考生选词填空回答表> _考生选词填空回答表;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<考生做过的试卷表> 考生做过的试卷表
        {
            get
            {
                if ((_考生做过的试卷表 == null))
                {
                    _考生做过的试卷表 = base.CreateObjectSet<考生做过的试卷表>("考生做过的试卷表");
                }
                return _考生做过的试卷表;
            }
        }
        private ObjectSet<考生做过的试卷表> _考生做过的试卷表;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<考试设置表> 考试设置表
        {
            get
            {
                if ((_考试设置表 == null))
                {
                    _考试设置表 = base.CreateObjectSet<考试设置表>("考试设置表");
                }
                return _考试设置表;
            }
        }
        private ObjectSet<考试设置表> _考试设置表;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<连线题答案表> 连线题答案表
        {
            get
            {
                if ((_连线题答案表 == null))
                {
                    _连线题答案表 = base.CreateObjectSet<连线题答案表>("连线题答案表");
                }
                return _连线题答案表;
            }
        }
        private ObjectSet<连线题答案表> _连线题答案表;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<连线题选项表> 连线题选项表
        {
            get
            {
                if ((_连线题选项表 == null))
                {
                    _连线题选项表 = base.CreateObjectSet<连线题选项表>("连线题选项表");
                }
                return _连线题选项表;
            }
        }
        private ObjectSet<连线题选项表> _连线题选项表;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<练习设置表> 练习设置表
        {
            get
            {
                if ((_练习设置表 == null))
                {
                    _练习设置表 = base.CreateObjectSet<练习设置表>("练习设置表");
                }
                return _练习设置表;
            }
        }
        private ObjectSet<练习设置表> _练习设置表;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<判断题答案表> 判断题答案表
        {
            get
            {
                if ((_判断题答案表 == null))
                {
                    _判断题答案表 = base.CreateObjectSet<判断题答案表>("判断题答案表");
                }
                return _判断题答案表;
            }
        }
        private ObjectSet<判断题答案表> _判断题答案表;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<试卷大题中试题表> 试卷大题中试题表
        {
            get
            {
                if ((_试卷大题中试题表 == null))
                {
                    _试卷大题中试题表 = base.CreateObjectSet<试卷大题中试题表>("试卷大题中试题表");
                }
                return _试卷大题中试题表;
            }
        }
        private ObjectSet<试卷大题中试题表> _试卷大题中试题表;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<试卷内容表> 试卷内容表
        {
            get
            {
                if ((_试卷内容表 == null))
                {
                    _试卷内容表 = base.CreateObjectSet<试卷内容表>("试卷内容表");
                }
                return _试卷内容表;
            }
        }
        private ObjectSet<试卷内容表> _试卷内容表;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<试卷外部信息表> 试卷外部信息表
        {
            get
            {
                if ((_试卷外部信息表 == null))
                {
                    _试卷外部信息表 = base.CreateObjectSet<试卷外部信息表>("试卷外部信息表");
                }
                return _试卷外部信息表;
            }
        }
        private ObjectSet<试卷外部信息表> _试卷外部信息表;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<试卷中大题表> 试卷中大题表
        {
            get
            {
                if ((_试卷中大题表 == null))
                {
                    _试卷中大题表 = base.CreateObjectSet<试卷中大题表>("试卷中大题表");
                }
                return _试卷中大题表;
            }
        }
        private ObjectSet<试卷中大题表> _试卷中大题表;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<试题内容表> 试题内容表
        {
            get
            {
                if ((_试题内容表 == null))
                {
                    _试题内容表 = base.CreateObjectSet<试题内容表>("试题内容表");
                }
                return _试题内容表;
            }
        }
        private ObjectSet<试题内容表> _试题内容表;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<试题外部信息表> 试题外部信息表
        {
            get
            {
                if ((_试题外部信息表 == null))
                {
                    _试题外部信息表 = base.CreateObjectSet<试题外部信息表>("试题外部信息表");
                }
                return _试题外部信息表;
            }
        }
        private ObjectSet<试题外部信息表> _试题外部信息表;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<所属分类表> 所属分类表
        {
            get
            {
                if ((_所属分类表 == null))
                {
                    _所属分类表 = base.CreateObjectSet<所属分类表>("所属分类表");
                }
                return _所属分类表;
            }
        }
        private ObjectSet<所属分类表> _所属分类表;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<问答题答案表> 问答题答案表
        {
            get
            {
                if ((_问答题答案表 == null))
                {
                    _问答题答案表 = base.CreateObjectSet<问答题答案表>("问答题答案表");
                }
                return _问答题答案表;
            }
        }
        private ObjectSet<问答题答案表> _问答题答案表;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<系统分类表> 系统分类表
        {
            get
            {
                if ((_系统分类表 == null))
                {
                    _系统分类表 = base.CreateObjectSet<系统分类表>("系统分类表");
                }
                return _系统分类表;
            }
        }
        private ObjectSet<系统分类表> _系统分类表;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<系统分类上下级关系表> 系统分类上下级关系表
        {
            get
            {
                if ((_系统分类上下级关系表 == null))
                {
                    _系统分类上下级关系表 = base.CreateObjectSet<系统分类上下级关系表>("系统分类上下级关系表");
                }
                return _系统分类上下级关系表;
            }
        }
        private ObjectSet<系统分类上下级关系表> _系统分类上下级关系表;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<修改成绩记录> 修改成绩记录
        {
            get
            {
                if ((_修改成绩记录 == null))
                {
                    _修改成绩记录 = base.CreateObjectSet<修改成绩记录>("修改成绩记录");
                }
                return _修改成绩记录;
            }
        }
        private ObjectSet<修改成绩记录> _修改成绩记录;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<用户表> 用户表
        {
            get
            {
                if ((_用户表 == null))
                {
                    _用户表 = base.CreateObjectSet<用户表>("用户表");
                }
                return _用户表;
            }
        }
        private ObjectSet<用户表> _用户表;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<自由题空格表> 自由题空格表
        {
            get
            {
                if ((_自由题空格表 == null))
                {
                    _自由题空格表 = base.CreateObjectSet<自由题空格表>("自由题空格表");
                }
                return _自由题空格表;
            }
        }
        private ObjectSet<自由题空格表> _自由题空格表;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<自由题填空答案表> 自由题填空答案表
        {
            get
            {
                if ((_自由题填空答案表 == null))
                {
                    _自由题填空答案表 = base.CreateObjectSet<自由题填空答案表>("自由题填空答案表");
                }
                return _自由题填空答案表;
            }
        }
        private ObjectSet<自由题填空答案表> _自由题填空答案表;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<自由题选项表> 自由题选项表
        {
            get
            {
                if ((_自由题选项表 == null))
                {
                    _自由题选项表 = base.CreateObjectSet<自由题选项表>("自由题选项表");
                }
                return _自由题选项表;
            }
        }
        private ObjectSet<自由题选项表> _自由题选项表;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<自由题选项空格答案表> 自由题选项空格答案表
        {
            get
            {
                if ((_自由题选项空格答案表 == null))
                {
                    _自由题选项空格答案表 = base.CreateObjectSet<自由题选项空格答案表>("自由题选项空格答案表");
                }
                return _自由题选项空格答案表;
            }
        }
        private ObjectSet<自由题选项空格答案表> _自由题选项空格答案表;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<自由题选项组表> 自由题选项组表
        {
            get
            {
                if ((_自由题选项组表 == null))
                {
                    _自由题选项组表 = base.CreateObjectSet<自由题选项组表>("自由题选项组表");
                }
                return _自由题选项组表;
            }
        }
        private ObjectSet<自由题选项组表> _自由题选项组表;

        #endregion
        #region AddTo 方法
    
        /// <summary>
        /// 用于向 sysdiagrams EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTosysdiagrams(sysdiagrams sysdiagrams)
        {
            base.AddObject("sysdiagrams", sysdiagrams);
        }
    
        /// <summary>
        /// 用于向 绑定账号表 EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTo绑定账号表(绑定账号表 绑定账号表)
        {
            base.AddObject("绑定账号表", 绑定账号表);
        }
    
        /// <summary>
        /// 用于向 部门表 EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTo部门表(部门表 部门表)
        {
            base.AddObject("部门表", 部门表);
        }
    
        /// <summary>
        /// 用于向 考生单选题回答表 EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTo考生单选题回答表(考生单选题回答表 考生单选题回答表)
        {
            base.AddObject("考生单选题回答表", 考生单选题回答表);
        }
    
        /// <summary>
        /// 用于向 考生多空选择题回答表 EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTo考生多空选择题回答表(考生多空选择题回答表 考生多空选择题回答表)
        {
            base.AddObject("考生多空选择题回答表", 考生多空选择题回答表);
        }
    
        /// <summary>
        /// 用于向 考生多选题回答表 EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTo考生多选题回答表(考生多选题回答表 考生多选题回答表)
        {
            base.AddObject("考生多选题回答表", 考生多选题回答表);
        }
    
        /// <summary>
        /// 用于向 考生范围表 EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTo考生范围表(考生范围表 考生范围表)
        {
            base.AddObject("考生范围表", 考生范围表);
        }
    
        /// <summary>
        /// 用于向 考生考试回答表 EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTo考生考试回答表(考生考试回答表 考生考试回答表)
        {
            base.AddObject("考生考试回答表", 考生考试回答表);
        }
    
        /// <summary>
        /// 用于向 考生连线题回答表 EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTo考生连线题回答表(考生连线题回答表 考生连线题回答表)
        {
            base.AddObject("考生连线题回答表", 考生连线题回答表);
        }
    
        /// <summary>
        /// 用于向 考生判断题回答表 EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTo考生判断题回答表(考生判断题回答表 考生判断题回答表)
        {
            base.AddObject("考生判断题回答表", 考生判断题回答表);
        }
    
        /// <summary>
        /// 用于向 考生填空题回答表 EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTo考生填空题回答表(考生填空题回答表 考生填空题回答表)
        {
            base.AddObject("考生填空题回答表", 考生填空题回答表);
        }
    
        /// <summary>
        /// 用于向 考生问答题回答表 EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTo考生问答题回答表(考生问答题回答表 考生问答题回答表)
        {
            base.AddObject("考生问答题回答表", 考生问答题回答表);
        }
    
        /// <summary>
        /// 用于向 考生选词填空回答表 EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTo考生选词填空回答表(考生选词填空回答表 考生选词填空回答表)
        {
            base.AddObject("考生选词填空回答表", 考生选词填空回答表);
        }
    
        /// <summary>
        /// 用于向 考生做过的试卷表 EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTo考生做过的试卷表(考生做过的试卷表 考生做过的试卷表)
        {
            base.AddObject("考生做过的试卷表", 考生做过的试卷表);
        }
    
        /// <summary>
        /// 用于向 考试设置表 EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTo考试设置表(考试设置表 考试设置表)
        {
            base.AddObject("考试设置表", 考试设置表);
        }
    
        /// <summary>
        /// 用于向 连线题答案表 EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTo连线题答案表(连线题答案表 连线题答案表)
        {
            base.AddObject("连线题答案表", 连线题答案表);
        }
    
        /// <summary>
        /// 用于向 连线题选项表 EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTo连线题选项表(连线题选项表 连线题选项表)
        {
            base.AddObject("连线题选项表", 连线题选项表);
        }
    
        /// <summary>
        /// 用于向 练习设置表 EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTo练习设置表(练习设置表 练习设置表)
        {
            base.AddObject("练习设置表", 练习设置表);
        }
    
        /// <summary>
        /// 用于向 判断题答案表 EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTo判断题答案表(判断题答案表 判断题答案表)
        {
            base.AddObject("判断题答案表", 判断题答案表);
        }
    
        /// <summary>
        /// 用于向 试卷大题中试题表 EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTo试卷大题中试题表(试卷大题中试题表 试卷大题中试题表)
        {
            base.AddObject("试卷大题中试题表", 试卷大题中试题表);
        }
    
        /// <summary>
        /// 用于向 试卷内容表 EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTo试卷内容表(试卷内容表 试卷内容表)
        {
            base.AddObject("试卷内容表", 试卷内容表);
        }
    
        /// <summary>
        /// 用于向 试卷外部信息表 EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTo试卷外部信息表(试卷外部信息表 试卷外部信息表)
        {
            base.AddObject("试卷外部信息表", 试卷外部信息表);
        }
    
        /// <summary>
        /// 用于向 试卷中大题表 EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTo试卷中大题表(试卷中大题表 试卷中大题表)
        {
            base.AddObject("试卷中大题表", 试卷中大题表);
        }
    
        /// <summary>
        /// 用于向 试题内容表 EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTo试题内容表(试题内容表 试题内容表)
        {
            base.AddObject("试题内容表", 试题内容表);
        }
    
        /// <summary>
        /// 用于向 试题外部信息表 EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTo试题外部信息表(试题外部信息表 试题外部信息表)
        {
            base.AddObject("试题外部信息表", 试题外部信息表);
        }
    
        /// <summary>
        /// 用于向 所属分类表 EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTo所属分类表(所属分类表 所属分类表)
        {
            base.AddObject("所属分类表", 所属分类表);
        }
    
        /// <summary>
        /// 用于向 问答题答案表 EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTo问答题答案表(问答题答案表 问答题答案表)
        {
            base.AddObject("问答题答案表", 问答题答案表);
        }
    
        /// <summary>
        /// 用于向 系统分类表 EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTo系统分类表(系统分类表 系统分类表)
        {
            base.AddObject("系统分类表", 系统分类表);
        }
    
        /// <summary>
        /// 用于向 系统分类上下级关系表 EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTo系统分类上下级关系表(系统分类上下级关系表 系统分类上下级关系表)
        {
            base.AddObject("系统分类上下级关系表", 系统分类上下级关系表);
        }
    
        /// <summary>
        /// 用于向 修改成绩记录 EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTo修改成绩记录(修改成绩记录 修改成绩记录)
        {
            base.AddObject("修改成绩记录", 修改成绩记录);
        }
    
        /// <summary>
        /// 用于向 用户表 EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTo用户表(用户表 用户表)
        {
            base.AddObject("用户表", 用户表);
        }
    
        /// <summary>
        /// 用于向 自由题空格表 EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTo自由题空格表(自由题空格表 自由题空格表)
        {
            base.AddObject("自由题空格表", 自由题空格表);
        }
    
        /// <summary>
        /// 用于向 自由题填空答案表 EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTo自由题填空答案表(自由题填空答案表 自由题填空答案表)
        {
            base.AddObject("自由题填空答案表", 自由题填空答案表);
        }
    
        /// <summary>
        /// 用于向 自由题选项表 EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTo自由题选项表(自由题选项表 自由题选项表)
        {
            base.AddObject("自由题选项表", 自由题选项表);
        }
    
        /// <summary>
        /// 用于向 自由题选项空格答案表 EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTo自由题选项空格答案表(自由题选项空格答案表 自由题选项空格答案表)
        {
            base.AddObject("自由题选项空格答案表", 自由题选项空格答案表);
        }
    
        /// <summary>
        /// 用于向 自由题选项组表 EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTo自由题选项组表(自由题选项组表 自由题选项组表)
        {
            base.AddObject("自由题选项组表", 自由题选项组表);
        }

        #endregion
    }
    

    #endregion
    
    #region 实体
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LoveKaoExamModel", Name="sysdiagrams")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class sysdiagrams : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 sysdiagrams 对象。
        /// </summary>
        /// <param name="name">name 属性的初始值。</param>
        /// <param name="principal_id">principal_id 属性的初始值。</param>
        /// <param name="diagram_id">diagram_id 属性的初始值。</param>
        public static sysdiagrams Createsysdiagrams(global::System.String name, global::System.Int32 principal_id, global::System.Int32 diagram_id)
        {
            sysdiagrams sysdiagrams = new sysdiagrams();
            sysdiagrams.name = name;
            sysdiagrams.principal_id = principal_id;
            sysdiagrams.diagram_id = diagram_id;
            return sysdiagrams;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 principal_id
        {
            get
            {
                return _principal_id;
            }
            set
            {
                Onprincipal_idChanging(value);
                ReportPropertyChanging("principal_id");
                _principal_id = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("principal_id");
                Onprincipal_idChanged();
            }
        }
        private global::System.Int32 _principal_id;
        partial void Onprincipal_idChanging(global::System.Int32 value);
        partial void Onprincipal_idChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 diagram_id
        {
            get
            {
                return _diagram_id;
            }
            set
            {
                if (_diagram_id != value)
                {
                    Ondiagram_idChanging(value);
                    ReportPropertyChanging("diagram_id");
                    _diagram_id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("diagram_id");
                    Ondiagram_idChanged();
                }
            }
        }
        private global::System.Int32 _diagram_id;
        partial void Ondiagram_idChanging(global::System.Int32 value);
        partial void Ondiagram_idChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> version
        {
            get
            {
                return _version;
            }
            set
            {
                OnversionChanging(value);
                ReportPropertyChanging("version");
                _version = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("version");
                OnversionChanged();
            }
        }
        private Nullable<global::System.Int32> _version;
        partial void OnversionChanging(Nullable<global::System.Int32> value);
        partial void OnversionChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.Byte[] definition
        {
            get
            {
                return StructuralObject.GetValidValue(_definition);
            }
            set
            {
                OndefinitionChanging(value);
                ReportPropertyChanging("definition");
                _definition = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("definition");
                OndefinitionChanged();
            }
        }
        private global::System.Byte[] _definition;
        partial void OndefinitionChanging(global::System.Byte[] value);
        partial void OndefinitionChanged();

        #endregion
    
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LoveKaoExamModel", Name="绑定账号表")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class 绑定账号表 : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 绑定账号表 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="本地账号ID">本地账号ID 属性的初始值。</param>
        /// <param name="爱考网账号">爱考网账号 属性的初始值。</param>
        /// <param name="爱考网密码">爱考网密码 属性的初始值。</param>
        /// <param name="爱考网邮箱">爱考网邮箱 属性的初始值。</param>
        /// <param name="绑定时间">绑定时间 属性的初始值。</param>
        public static 绑定账号表 Create绑定账号表(global::System.Int32 id, global::System.Guid 本地账号ID, global::System.String 爱考网账号, global::System.String 爱考网密码, global::System.String 爱考网邮箱, global::System.DateTime 绑定时间)
        {
            绑定账号表 绑定账号表 = new 绑定账号表();
            绑定账号表.ID = id;
            绑定账号表.本地账号ID = 本地账号ID;
            绑定账号表.爱考网账号 = 爱考网账号;
            绑定账号表.爱考网密码 = 爱考网密码;
            绑定账号表.爱考网邮箱 = 爱考网邮箱;
            绑定账号表.绑定时间 = 绑定时间;
            return 绑定账号表;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 本地账号ID
        {
            get
            {
                return _本地账号ID;
            }
            set
            {
                On本地账号IDChanging(value);
                ReportPropertyChanging("本地账号ID");
                _本地账号ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("本地账号ID");
                On本地账号IDChanged();
            }
        }
        private global::System.Guid _本地账号ID;
        partial void On本地账号IDChanging(global::System.Guid value);
        partial void On本地账号IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String 爱考网账号
        {
            get
            {
                return _爱考网账号;
            }
            set
            {
                On爱考网账号Changing(value);
                ReportPropertyChanging("爱考网账号");
                _爱考网账号 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("爱考网账号");
                On爱考网账号Changed();
            }
        }
        private global::System.String _爱考网账号;
        partial void On爱考网账号Changing(global::System.String value);
        partial void On爱考网账号Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String 爱考网密码
        {
            get
            {
                return _爱考网密码;
            }
            set
            {
                On爱考网密码Changing(value);
                ReportPropertyChanging("爱考网密码");
                _爱考网密码 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("爱考网密码");
                On爱考网密码Changed();
            }
        }
        private global::System.String _爱考网密码;
        partial void On爱考网密码Changing(global::System.String value);
        partial void On爱考网密码Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String 爱考网邮箱
        {
            get
            {
                return _爱考网邮箱;
            }
            set
            {
                On爱考网邮箱Changing(value);
                ReportPropertyChanging("爱考网邮箱");
                _爱考网邮箱 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("爱考网邮箱");
                On爱考网邮箱Changed();
            }
        }
        private global::System.String _爱考网邮箱;
        partial void On爱考网邮箱Changing(global::System.String value);
        partial void On爱考网邮箱Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime 绑定时间
        {
            get
            {
                return _绑定时间;
            }
            set
            {
                On绑定时间Changing(value);
                ReportPropertyChanging("绑定时间");
                _绑定时间 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("绑定时间");
                On绑定时间Changed();
            }
        }
        private global::System.DateTime _绑定时间;
        partial void On绑定时间Changing(global::System.DateTime value);
        partial void On绑定时间Changed();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_绑定账号表_用户表", "用户表")]
        public 用户表 用户表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<用户表>("LoveKaoExamModel.FK_绑定账号表_用户表", "用户表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<用户表>("LoveKaoExamModel.FK_绑定账号表_用户表", "用户表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<用户表> 用户表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<用户表>("LoveKaoExamModel.FK_绑定账号表_用户表", "用户表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<用户表>("LoveKaoExamModel.FK_绑定账号表_用户表", "用户表", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LoveKaoExamModel", Name="部门表")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class 部门表 : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 部门表 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="名称">名称 属性的初始值。</param>
        /// <param name="添加人ID">添加人ID 属性的初始值。</param>
        /// <param name="添加时间">添加时间 属性的初始值。</param>
        public static 部门表 Create部门表(global::System.Guid id, global::System.String 名称, global::System.Guid 添加人ID, global::System.DateTime 添加时间)
        {
            部门表 部门表 = new 部门表();
            部门表.ID = id;
            部门表.名称 = 名称;
            部门表.添加人ID = 添加人ID;
            部门表.添加时间 = 添加时间;
            return 部门表;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String 名称
        {
            get
            {
                return _名称;
            }
            set
            {
                On名称Changing(value);
                ReportPropertyChanging("名称");
                _名称 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("名称");
                On名称Changed();
            }
        }
        private global::System.String _名称;
        partial void On名称Changing(global::System.String value);
        partial void On名称Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> 上级部门ID
        {
            get
            {
                return _上级部门ID;
            }
            set
            {
                On上级部门IDChanging(value);
                ReportPropertyChanging("上级部门ID");
                _上级部门ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("上级部门ID");
                On上级部门IDChanged();
            }
        }
        private Nullable<global::System.Guid> _上级部门ID;
        partial void On上级部门IDChanging(Nullable<global::System.Guid> value);
        partial void On上级部门IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 添加人ID
        {
            get
            {
                return _添加人ID;
            }
            set
            {
                On添加人IDChanging(value);
                ReportPropertyChanging("添加人ID");
                _添加人ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("添加人ID");
                On添加人IDChanged();
            }
        }
        private global::System.Guid _添加人ID;
        partial void On添加人IDChanging(global::System.Guid value);
        partial void On添加人IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime 添加时间
        {
            get
            {
                return _添加时间;
            }
            set
            {
                On添加时间Changing(value);
                ReportPropertyChanging("添加时间");
                _添加时间 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("添加时间");
                On添加时间Changed();
            }
        }
        private global::System.DateTime _添加时间;
        partial void On添加时间Changing(global::System.DateTime value);
        partial void On添加时间Changed();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_部门_部门", "部门表1")]
        public EntityCollection<部门表> 部门表1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<部门表>("LoveKaoExamModel.FK_部门_部门", "部门表1");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<部门表>("LoveKaoExamModel.FK_部门_部门", "部门表1", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_部门_部门", "部门表")]
        public 部门表 部门表2
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<部门表>("LoveKaoExamModel.FK_部门_部门", "部门表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<部门表>("LoveKaoExamModel.FK_部门_部门", "部门表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<部门表> 部门表2Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<部门表>("LoveKaoExamModel.FK_部门_部门", "部门表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<部门表>("LoveKaoExamModel.FK_部门_部门", "部门表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_部门表_用户表", "用户表")]
        public 用户表 用户表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<用户表>("LoveKaoExamModel.FK_部门表_用户表", "用户表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<用户表>("LoveKaoExamModel.FK_部门表_用户表", "用户表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<用户表> 用户表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<用户表>("LoveKaoExamModel.FK_部门表_用户表", "用户表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<用户表>("LoveKaoExamModel.FK_部门表_用户表", "用户表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_用户表_部门表", "用户表")]
        public EntityCollection<用户表> 用户表1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<用户表>("LoveKaoExamModel.FK_用户表_部门表", "用户表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<用户表>("LoveKaoExamModel.FK_用户表_部门表", "用户表", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LoveKaoExamModel", Name="考生单选题回答表")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class 考生单选题回答表 : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 考生单选题回答表 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="回答的选项ID">回答的选项ID 属性的初始值。</param>
        public static 考生单选题回答表 Create考生单选题回答表(global::System.Guid id, global::System.Guid 回答的选项ID)
        {
            考生单选题回答表 考生单选题回答表 = new 考生单选题回答表();
            考生单选题回答表.ID = id;
            考生单选题回答表.回答的选项ID = 回答的选项ID;
            return 考生单选题回答表;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 回答的选项ID
        {
            get
            {
                return _回答的选项ID;
            }
            set
            {
                On回答的选项IDChanging(value);
                ReportPropertyChanging("回答的选项ID");
                _回答的选项ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("回答的选项ID");
                On回答的选项IDChanged();
            }
        }
        private global::System.Guid _回答的选项ID;
        partial void On回答的选项IDChanging(global::System.Guid value);
        partial void On回答的选项IDChanged();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_会员单选题回答_会员考试回答", "考生考试回答表")]
        public 考生考试回答表 考生考试回答表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<考生考试回答表>("LoveKaoExamModel.FK_会员单选题回答_会员考试回答", "考生考试回答表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<考生考试回答表>("LoveKaoExamModel.FK_会员单选题回答_会员考试回答", "考生考试回答表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<考生考试回答表> 考生考试回答表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<考生考试回答表>("LoveKaoExamModel.FK_会员单选题回答_会员考试回答", "考生考试回答表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<考生考试回答表>("LoveKaoExamModel.FK_会员单选题回答_会员考试回答", "考生考试回答表", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LoveKaoExamModel", Name="考生多空选择题回答表")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class 考生多空选择题回答表 : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 考生多空选择题回答表 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="考生考试回答ID">考生考试回答ID 属性的初始值。</param>
        /// <param name="该空ID">该空ID 属性的初始值。</param>
        /// <param name="该空的回答ID">该空的回答ID 属性的初始值。</param>
        public static 考生多空选择题回答表 Create考生多空选择题回答表(global::System.Guid id, global::System.Guid 考生考试回答ID, global::System.Guid 该空ID, global::System.Guid 该空的回答ID)
        {
            考生多空选择题回答表 考生多空选择题回答表 = new 考生多空选择题回答表();
            考生多空选择题回答表.ID = id;
            考生多空选择题回答表.考生考试回答ID = 考生考试回答ID;
            考生多空选择题回答表.该空ID = 该空ID;
            考生多空选择题回答表.该空的回答ID = 该空的回答ID;
            return 考生多空选择题回答表;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 考生考试回答ID
        {
            get
            {
                return _考生考试回答ID;
            }
            set
            {
                On考生考试回答IDChanging(value);
                ReportPropertyChanging("考生考试回答ID");
                _考生考试回答ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("考生考试回答ID");
                On考生考试回答IDChanged();
            }
        }
        private global::System.Guid _考生考试回答ID;
        partial void On考生考试回答IDChanging(global::System.Guid value);
        partial void On考生考试回答IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 该空ID
        {
            get
            {
                return _该空ID;
            }
            set
            {
                On该空IDChanging(value);
                ReportPropertyChanging("该空ID");
                _该空ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("该空ID");
                On该空IDChanged();
            }
        }
        private global::System.Guid _该空ID;
        partial void On该空IDChanging(global::System.Guid value);
        partial void On该空IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 该空的回答ID
        {
            get
            {
                return _该空的回答ID;
            }
            set
            {
                On该空的回答IDChanging(value);
                ReportPropertyChanging("该空的回答ID");
                _该空的回答ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("该空的回答ID");
                On该空的回答IDChanged();
            }
        }
        private global::System.Guid _该空的回答ID;
        partial void On该空的回答IDChanging(global::System.Guid value);
        partial void On该空的回答IDChanged();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_会员多空选择题回答_会员考试回答", "考生考试回答表")]
        public 考生考试回答表 考生考试回答表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<考生考试回答表>("LoveKaoExamModel.FK_会员多空选择题回答_会员考试回答", "考生考试回答表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<考生考试回答表>("LoveKaoExamModel.FK_会员多空选择题回答_会员考试回答", "考生考试回答表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<考生考试回答表> 考生考试回答表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<考生考试回答表>("LoveKaoExamModel.FK_会员多空选择题回答_会员考试回答", "考生考试回答表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<考生考试回答表>("LoveKaoExamModel.FK_会员多空选择题回答_会员考试回答", "考生考试回答表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_会员多空选择题回答_空格历史", "自由题空格表")]
        public 自由题空格表 自由题空格表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<自由题空格表>("LoveKaoExamModel.FK_会员多空选择题回答_空格历史", "自由题空格表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<自由题空格表>("LoveKaoExamModel.FK_会员多空选择题回答_空格历史", "自由题空格表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<自由题空格表> 自由题空格表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<自由题空格表>("LoveKaoExamModel.FK_会员多空选择题回答_空格历史", "自由题空格表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<自由题空格表>("LoveKaoExamModel.FK_会员多空选择题回答_空格历史", "自由题空格表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_会员多空选择题回答_选项历史", "自由题选项表")]
        public 自由题选项表 自由题选项表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<自由题选项表>("LoveKaoExamModel.FK_会员多空选择题回答_选项历史", "自由题选项表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<自由题选项表>("LoveKaoExamModel.FK_会员多空选择题回答_选项历史", "自由题选项表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<自由题选项表> 自由题选项表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<自由题选项表>("LoveKaoExamModel.FK_会员多空选择题回答_选项历史", "自由题选项表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<自由题选项表>("LoveKaoExamModel.FK_会员多空选择题回答_选项历史", "自由题选项表", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LoveKaoExamModel", Name="考生多选题回答表")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class 考生多选题回答表 : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 考生多选题回答表 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="考生考试回答ID">考生考试回答ID 属性的初始值。</param>
        /// <param name="回答的选项ID">回答的选项ID 属性的初始值。</param>
        public static 考生多选题回答表 Create考生多选题回答表(global::System.Guid id, global::System.Guid 考生考试回答ID, global::System.Guid 回答的选项ID)
        {
            考生多选题回答表 考生多选题回答表 = new 考生多选题回答表();
            考生多选题回答表.ID = id;
            考生多选题回答表.考生考试回答ID = 考生考试回答ID;
            考生多选题回答表.回答的选项ID = 回答的选项ID;
            return 考生多选题回答表;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 考生考试回答ID
        {
            get
            {
                return _考生考试回答ID;
            }
            set
            {
                On考生考试回答IDChanging(value);
                ReportPropertyChanging("考生考试回答ID");
                _考生考试回答ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("考生考试回答ID");
                On考生考试回答IDChanged();
            }
        }
        private global::System.Guid _考生考试回答ID;
        partial void On考生考试回答IDChanging(global::System.Guid value);
        partial void On考生考试回答IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 回答的选项ID
        {
            get
            {
                return _回答的选项ID;
            }
            set
            {
                On回答的选项IDChanging(value);
                ReportPropertyChanging("回答的选项ID");
                _回答的选项ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("回答的选项ID");
                On回答的选项IDChanged();
            }
        }
        private global::System.Guid _回答的选项ID;
        partial void On回答的选项IDChanging(global::System.Guid value);
        partial void On回答的选项IDChanged();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_会员多选题回答_会员考试回答", "考生考试回答表")]
        public 考生考试回答表 考生考试回答表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<考生考试回答表>("LoveKaoExamModel.FK_会员多选题回答_会员考试回答", "考生考试回答表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<考生考试回答表>("LoveKaoExamModel.FK_会员多选题回答_会员考试回答", "考生考试回答表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<考生考试回答表> 考生考试回答表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<考生考试回答表>("LoveKaoExamModel.FK_会员多选题回答_会员考试回答", "考生考试回答表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<考生考试回答表>("LoveKaoExamModel.FK_会员多选题回答_会员考试回答", "考生考试回答表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_会员多选题回答_选项历史", "自由题选项表")]
        public 自由题选项表 自由题选项表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<自由题选项表>("LoveKaoExamModel.FK_会员多选题回答_选项历史", "自由题选项表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<自由题选项表>("LoveKaoExamModel.FK_会员多选题回答_选项历史", "自由题选项表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<自由题选项表> 自由题选项表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<自由题选项表>("LoveKaoExamModel.FK_会员多选题回答_选项历史", "自由题选项表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<自由题选项表>("LoveKaoExamModel.FK_会员多选题回答_选项历史", "自由题选项表", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LoveKaoExamModel", Name="考生范围表")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class 考生范围表 : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 考生范围表 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="相关ID">相关ID 属性的初始值。</param>
        /// <param name="考生ID">考生ID 属性的初始值。</param>
        public static 考生范围表 Create考生范围表(global::System.Guid id, global::System.Guid 相关ID, global::System.Guid 考生ID)
        {
            考生范围表 考生范围表 = new 考生范围表();
            考生范围表.ID = id;
            考生范围表.相关ID = 相关ID;
            考生范围表.考生ID = 考生ID;
            return 考生范围表;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 相关ID
        {
            get
            {
                return _相关ID;
            }
            set
            {
                On相关IDChanging(value);
                ReportPropertyChanging("相关ID");
                _相关ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("相关ID");
                On相关IDChanged();
            }
        }
        private global::System.Guid _相关ID;
        partial void On相关IDChanging(global::System.Guid value);
        partial void On相关IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 考生ID
        {
            get
            {
                return _考生ID;
            }
            set
            {
                On考生IDChanging(value);
                ReportPropertyChanging("考生ID");
                _考生ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("考生ID");
                On考生IDChanged();
            }
        }
        private global::System.Guid _考生ID;
        partial void On考生IDChanging(global::System.Guid value);
        partial void On考生IDChanged();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_考生范围表_用户表", "用户表")]
        public 用户表 用户表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<用户表>("LoveKaoExamModel.FK_考生范围表_用户表", "用户表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<用户表>("LoveKaoExamModel.FK_考生范围表_用户表", "用户表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<用户表> 用户表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<用户表>("LoveKaoExamModel.FK_考生范围表_用户表", "用户表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<用户表>("LoveKaoExamModel.FK_考生范围表_用户表", "用户表", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LoveKaoExamModel", Name="考生考试回答表")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class 考生考试回答表 : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 考生考试回答表 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="考生做过的试卷ID">考生做过的试卷ID 属性的初始值。</param>
        /// <param name="试卷大题中试题ID">试卷大题中试题ID 属性的初始值。</param>
        /// <param name="该题的用时">该题的用时 属性的初始值。</param>
        /// <param name="评语">评语 属性的初始值。</param>
        public static 考生考试回答表 Create考生考试回答表(global::System.Guid id, global::System.Guid 考生做过的试卷ID, global::System.Guid 试卷大题中试题ID, global::System.Int16 该题的用时, global::System.String 评语)
        {
            考生考试回答表 考生考试回答表 = new 考生考试回答表();
            考生考试回答表.ID = id;
            考生考试回答表.考生做过的试卷ID = 考生做过的试卷ID;
            考生考试回答表.试卷大题中试题ID = 试卷大题中试题ID;
            考生考试回答表.该题的用时 = 该题的用时;
            考生考试回答表.评语 = 评语;
            return 考生考试回答表;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 考生做过的试卷ID
        {
            get
            {
                return _考生做过的试卷ID;
            }
            set
            {
                On考生做过的试卷IDChanging(value);
                ReportPropertyChanging("考生做过的试卷ID");
                _考生做过的试卷ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("考生做过的试卷ID");
                On考生做过的试卷IDChanged();
            }
        }
        private global::System.Guid _考生做过的试卷ID;
        partial void On考生做过的试卷IDChanging(global::System.Guid value);
        partial void On考生做过的试卷IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 试卷大题中试题ID
        {
            get
            {
                return _试卷大题中试题ID;
            }
            set
            {
                On试卷大题中试题IDChanging(value);
                ReportPropertyChanging("试卷大题中试题ID");
                _试卷大题中试题ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("试卷大题中试题ID");
                On试卷大题中试题IDChanged();
            }
        }
        private global::System.Guid _试卷大题中试题ID;
        partial void On试卷大题中试题IDChanging(global::System.Guid value);
        partial void On试卷大题中试题IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int16 该题的用时
        {
            get
            {
                return _该题的用时;
            }
            set
            {
                On该题的用时Changing(value);
                ReportPropertyChanging("该题的用时");
                _该题的用时 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("该题的用时");
                On该题的用时Changed();
            }
        }
        private global::System.Int16 _该题的用时;
        partial void On该题的用时Changing(global::System.Int16 value);
        partial void On该题的用时Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> 该题的得分
        {
            get
            {
                return _该题的得分;
            }
            set
            {
                On该题的得分Changing(value);
                ReportPropertyChanging("该题的得分");
                _该题的得分 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("该题的得分");
                On该题的得分Changed();
            }
        }
        private Nullable<global::System.Decimal> _该题的得分;
        partial void On该题的得分Changing(Nullable<global::System.Decimal> value);
        partial void On该题的得分Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String 评语
        {
            get
            {
                return _评语;
            }
            set
            {
                On评语Changing(value);
                ReportPropertyChanging("评语");
                _评语 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("评语");
                On评语Changed();
            }
        }
        private global::System.String _评语;
        partial void On评语Changing(global::System.String value);
        partial void On评语Changed();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_会员单选题回答_会员考试回答", "考生单选题回答表")]
        public 考生单选题回答表 考生单选题回答表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<考生单选题回答表>("LoveKaoExamModel.FK_会员单选题回答_会员考试回答", "考生单选题回答表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<考生单选题回答表>("LoveKaoExamModel.FK_会员单选题回答_会员考试回答", "考生单选题回答表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<考生单选题回答表> 考生单选题回答表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<考生单选题回答表>("LoveKaoExamModel.FK_会员单选题回答_会员考试回答", "考生单选题回答表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<考生单选题回答表>("LoveKaoExamModel.FK_会员单选题回答_会员考试回答", "考生单选题回答表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_会员多空选择题回答_会员考试回答", "考生多空选择题回答表")]
        public EntityCollection<考生多空选择题回答表> 考生多空选择题回答表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<考生多空选择题回答表>("LoveKaoExamModel.FK_会员多空选择题回答_会员考试回答", "考生多空选择题回答表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<考生多空选择题回答表>("LoveKaoExamModel.FK_会员多空选择题回答_会员考试回答", "考生多空选择题回答表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_会员多选题回答_会员考试回答", "考生多选题回答表")]
        public EntityCollection<考生多选题回答表> 考生多选题回答表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<考生多选题回答表>("LoveKaoExamModel.FK_会员多选题回答_会员考试回答", "考生多选题回答表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<考生多选题回答表>("LoveKaoExamModel.FK_会员多选题回答_会员考试回答", "考生多选题回答表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_会员考试回答_会员做过的试卷", "考生做过的试卷表")]
        public 考生做过的试卷表 考生做过的试卷表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<考生做过的试卷表>("LoveKaoExamModel.FK_会员考试回答_会员做过的试卷", "考生做过的试卷表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<考生做过的试卷表>("LoveKaoExamModel.FK_会员考试回答_会员做过的试卷", "考生做过的试卷表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<考生做过的试卷表> 考生做过的试卷表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<考生做过的试卷表>("LoveKaoExamModel.FK_会员考试回答_会员做过的试卷", "考生做过的试卷表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<考生做过的试卷表>("LoveKaoExamModel.FK_会员考试回答_会员做过的试卷", "考生做过的试卷表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_会员考试回答_试卷题目历史", "试卷大题中试题表")]
        public 试卷大题中试题表 试卷大题中试题表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试卷大题中试题表>("LoveKaoExamModel.FK_会员考试回答_试卷题目历史", "试卷大题中试题表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试卷大题中试题表>("LoveKaoExamModel.FK_会员考试回答_试卷题目历史", "试卷大题中试题表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<试卷大题中试题表> 试卷大题中试题表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试卷大题中试题表>("LoveKaoExamModel.FK_会员考试回答_试卷题目历史", "试卷大题中试题表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<试卷大题中试题表>("LoveKaoExamModel.FK_会员考试回答_试卷题目历史", "试卷大题中试题表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_会员连线题回答_会员考试回答", "考生连线题回答表")]
        public EntityCollection<考生连线题回答表> 考生连线题回答表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<考生连线题回答表>("LoveKaoExamModel.FK_会员连线题回答_会员考试回答", "考生连线题回答表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<考生连线题回答表>("LoveKaoExamModel.FK_会员连线题回答_会员考试回答", "考生连线题回答表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_会员判断题回答_会员考试回答", "考生判断题回答表")]
        public 考生判断题回答表 考生判断题回答表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<考生判断题回答表>("LoveKaoExamModel.FK_会员判断题回答_会员考试回答", "考生判断题回答表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<考生判断题回答表>("LoveKaoExamModel.FK_会员判断题回答_会员考试回答", "考生判断题回答表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<考生判断题回答表> 考生判断题回答表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<考生判断题回答表>("LoveKaoExamModel.FK_会员判断题回答_会员考试回答", "考生判断题回答表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<考生判断题回答表>("LoveKaoExamModel.FK_会员判断题回答_会员考试回答", "考生判断题回答表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_会员填空题回答_会员考试回答", "考生填空题回答表")]
        public EntityCollection<考生填空题回答表> 考生填空题回答表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<考生填空题回答表>("LoveKaoExamModel.FK_会员填空题回答_会员考试回答", "考生填空题回答表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<考生填空题回答表>("LoveKaoExamModel.FK_会员填空题回答_会员考试回答", "考生填空题回答表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_会员问答题回答_会员考试回答", "考生问答题回答表")]
        public 考生问答题回答表 考生问答题回答表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<考生问答题回答表>("LoveKaoExamModel.FK_会员问答题回答_会员考试回答", "考生问答题回答表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<考生问答题回答表>("LoveKaoExamModel.FK_会员问答题回答_会员考试回答", "考生问答题回答表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<考生问答题回答表> 考生问答题回答表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<考生问答题回答表>("LoveKaoExamModel.FK_会员问答题回答_会员考试回答", "考生问答题回答表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<考生问答题回答表>("LoveKaoExamModel.FK_会员问答题回答_会员考试回答", "考生问答题回答表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_会员选词填空回答_会员考试回答", "考生选词填空回答表")]
        public EntityCollection<考生选词填空回答表> 考生选词填空回答表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<考生选词填空回答表>("LoveKaoExamModel.FK_会员选词填空回答_会员考试回答", "考生选词填空回答表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<考生选词填空回答表>("LoveKaoExamModel.FK_会员选词填空回答_会员考试回答", "考生选词填空回答表", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LoveKaoExamModel", Name="考生连线题回答表")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class 考生连线题回答表 : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 考生连线题回答表 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="考生考试回答ID">考生考试回答ID 属性的初始值。</param>
        /// <param name="连线题左边小题ID">连线题左边小题ID 属性的初始值。</param>
        /// <param name="回答的选项ID">回答的选项ID 属性的初始值。</param>
        public static 考生连线题回答表 Create考生连线题回答表(global::System.Guid id, global::System.Guid 考生考试回答ID, global::System.Guid 连线题左边小题ID, global::System.Guid 回答的选项ID)
        {
            考生连线题回答表 考生连线题回答表 = new 考生连线题回答表();
            考生连线题回答表.ID = id;
            考生连线题回答表.考生考试回答ID = 考生考试回答ID;
            考生连线题回答表.连线题左边小题ID = 连线题左边小题ID;
            考生连线题回答表.回答的选项ID = 回答的选项ID;
            return 考生连线题回答表;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 考生考试回答ID
        {
            get
            {
                return _考生考试回答ID;
            }
            set
            {
                On考生考试回答IDChanging(value);
                ReportPropertyChanging("考生考试回答ID");
                _考生考试回答ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("考生考试回答ID");
                On考生考试回答IDChanged();
            }
        }
        private global::System.Guid _考生考试回答ID;
        partial void On考生考试回答IDChanging(global::System.Guid value);
        partial void On考生考试回答IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 连线题左边小题ID
        {
            get
            {
                return _连线题左边小题ID;
            }
            set
            {
                On连线题左边小题IDChanging(value);
                ReportPropertyChanging("连线题左边小题ID");
                _连线题左边小题ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("连线题左边小题ID");
                On连线题左边小题IDChanged();
            }
        }
        private global::System.Guid _连线题左边小题ID;
        partial void On连线题左边小题IDChanging(global::System.Guid value);
        partial void On连线题左边小题IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 回答的选项ID
        {
            get
            {
                return _回答的选项ID;
            }
            set
            {
                On回答的选项IDChanging(value);
                ReportPropertyChanging("回答的选项ID");
                _回答的选项ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("回答的选项ID");
                On回答的选项IDChanged();
            }
        }
        private global::System.Guid _回答的选项ID;
        partial void On回答的选项IDChanging(global::System.Guid value);
        partial void On回答的选项IDChanged();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_会员连线题回答_会员考试回答", "考生考试回答表")]
        public 考生考试回答表 考生考试回答表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<考生考试回答表>("LoveKaoExamModel.FK_会员连线题回答_会员考试回答", "考生考试回答表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<考生考试回答表>("LoveKaoExamModel.FK_会员连线题回答_会员考试回答", "考生考试回答表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<考生考试回答表> 考生考试回答表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<考生考试回答表>("LoveKaoExamModel.FK_会员连线题回答_会员考试回答", "考生考试回答表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<考生考试回答表>("LoveKaoExamModel.FK_会员连线题回答_会员考试回答", "考生考试回答表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_会员连线题回答_连线题选项历史", "连线题选项表")]
        public 连线题选项表 连线题选项表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<连线题选项表>("LoveKaoExamModel.FK_会员连线题回答_连线题选项历史", "连线题选项表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<连线题选项表>("LoveKaoExamModel.FK_会员连线题回答_连线题选项历史", "连线题选项表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<连线题选项表> 连线题选项表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<连线题选项表>("LoveKaoExamModel.FK_会员连线题回答_连线题选项历史", "连线题选项表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<连线题选项表>("LoveKaoExamModel.FK_会员连线题回答_连线题选项历史", "连线题选项表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_会员连线题回答_连线题选项历史1", "连线题选项表")]
        public 连线题选项表 连线题选项表1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<连线题选项表>("LoveKaoExamModel.FK_会员连线题回答_连线题选项历史1", "连线题选项表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<连线题选项表>("LoveKaoExamModel.FK_会员连线题回答_连线题选项历史1", "连线题选项表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<连线题选项表> 连线题选项表1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<连线题选项表>("LoveKaoExamModel.FK_会员连线题回答_连线题选项历史1", "连线题选项表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<连线题选项表>("LoveKaoExamModel.FK_会员连线题回答_连线题选项历史1", "连线题选项表", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LoveKaoExamModel", Name="考生判断题回答表")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class 考生判断题回答表 : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 考生判断题回答表 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="回答的内容">回答的内容 属性的初始值。</param>
        public static 考生判断题回答表 Create考生判断题回答表(global::System.Guid id, global::System.Boolean 回答的内容)
        {
            考生判断题回答表 考生判断题回答表 = new 考生判断题回答表();
            考生判断题回答表.ID = id;
            考生判断题回答表.回答的内容 = 回答的内容;
            return 考生判断题回答表;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean 回答的内容
        {
            get
            {
                return _回答的内容;
            }
            set
            {
                On回答的内容Changing(value);
                ReportPropertyChanging("回答的内容");
                _回答的内容 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("回答的内容");
                On回答的内容Changed();
            }
        }
        private global::System.Boolean _回答的内容;
        partial void On回答的内容Changing(global::System.Boolean value);
        partial void On回答的内容Changed();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_会员判断题回答_会员考试回答", "考生考试回答表")]
        public 考生考试回答表 考生考试回答表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<考生考试回答表>("LoveKaoExamModel.FK_会员判断题回答_会员考试回答", "考生考试回答表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<考生考试回答表>("LoveKaoExamModel.FK_会员判断题回答_会员考试回答", "考生考试回答表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<考生考试回答表> 考生考试回答表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<考生考试回答表>("LoveKaoExamModel.FK_会员判断题回答_会员考试回答", "考生考试回答表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<考生考试回答表>("LoveKaoExamModel.FK_会员判断题回答_会员考试回答", "考生考试回答表", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LoveKaoExamModel", Name="考生填空题回答表")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class 考生填空题回答表 : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 考生填空题回答表 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="考生考试回答ID">考生考试回答ID 属性的初始值。</param>
        /// <param name="回答的内容">回答的内容 属性的初始值。</param>
        /// <param name="该空ID">该空ID 属性的初始值。</param>
        public static 考生填空题回答表 Create考生填空题回答表(global::System.Guid id, global::System.Guid 考生考试回答ID, global::System.String 回答的内容, global::System.Guid 该空ID)
        {
            考生填空题回答表 考生填空题回答表 = new 考生填空题回答表();
            考生填空题回答表.ID = id;
            考生填空题回答表.考生考试回答ID = 考生考试回答ID;
            考生填空题回答表.回答的内容 = 回答的内容;
            考生填空题回答表.该空ID = 该空ID;
            return 考生填空题回答表;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 考生考试回答ID
        {
            get
            {
                return _考生考试回答ID;
            }
            set
            {
                On考生考试回答IDChanging(value);
                ReportPropertyChanging("考生考试回答ID");
                _考生考试回答ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("考生考试回答ID");
                On考生考试回答IDChanged();
            }
        }
        private global::System.Guid _考生考试回答ID;
        partial void On考生考试回答IDChanging(global::System.Guid value);
        partial void On考生考试回答IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String 回答的内容
        {
            get
            {
                return _回答的内容;
            }
            set
            {
                On回答的内容Changing(value);
                ReportPropertyChanging("回答的内容");
                _回答的内容 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("回答的内容");
                On回答的内容Changed();
            }
        }
        private global::System.String _回答的内容;
        partial void On回答的内容Changing(global::System.String value);
        partial void On回答的内容Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 该空ID
        {
            get
            {
                return _该空ID;
            }
            set
            {
                On该空IDChanging(value);
                ReportPropertyChanging("该空ID");
                _该空ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("该空ID");
                On该空IDChanged();
            }
        }
        private global::System.Guid _该空ID;
        partial void On该空IDChanging(global::System.Guid value);
        partial void On该空IDChanged();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_会员填空题回答_会员考试回答", "考生考试回答表")]
        public 考生考试回答表 考生考试回答表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<考生考试回答表>("LoveKaoExamModel.FK_会员填空题回答_会员考试回答", "考生考试回答表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<考生考试回答表>("LoveKaoExamModel.FK_会员填空题回答_会员考试回答", "考生考试回答表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<考生考试回答表> 考生考试回答表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<考生考试回答表>("LoveKaoExamModel.FK_会员填空题回答_会员考试回答", "考生考试回答表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<考生考试回答表>("LoveKaoExamModel.FK_会员填空题回答_会员考试回答", "考生考试回答表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_会员填空题回答表_自由题空格表", "自由题空格表")]
        public 自由题空格表 自由题空格表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<自由题空格表>("LoveKaoExamModel.FK_会员填空题回答表_自由题空格表", "自由题空格表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<自由题空格表>("LoveKaoExamModel.FK_会员填空题回答表_自由题空格表", "自由题空格表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<自由题空格表> 自由题空格表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<自由题空格表>("LoveKaoExamModel.FK_会员填空题回答表_自由题空格表", "自由题空格表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<自由题空格表>("LoveKaoExamModel.FK_会员填空题回答表_自由题空格表", "自由题空格表", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LoveKaoExamModel", Name="考生问答题回答表")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class 考生问答题回答表 : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 考生问答题回答表 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="回答的内容">回答的内容 属性的初始值。</param>
        public static 考生问答题回答表 Create考生问答题回答表(global::System.Guid id, global::System.String 回答的内容)
        {
            考生问答题回答表 考生问答题回答表 = new 考生问答题回答表();
            考生问答题回答表.ID = id;
            考生问答题回答表.回答的内容 = 回答的内容;
            return 考生问答题回答表;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String 回答的内容
        {
            get
            {
                return _回答的内容;
            }
            set
            {
                On回答的内容Changing(value);
                ReportPropertyChanging("回答的内容");
                _回答的内容 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("回答的内容");
                On回答的内容Changed();
            }
        }
        private global::System.String _回答的内容;
        partial void On回答的内容Changing(global::System.String value);
        partial void On回答的内容Changed();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_会员问答题回答_会员考试回答", "考生考试回答表")]
        public 考生考试回答表 考生考试回答表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<考生考试回答表>("LoveKaoExamModel.FK_会员问答题回答_会员考试回答", "考生考试回答表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<考生考试回答表>("LoveKaoExamModel.FK_会员问答题回答_会员考试回答", "考生考试回答表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<考生考试回答表> 考生考试回答表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<考生考试回答表>("LoveKaoExamModel.FK_会员问答题回答_会员考试回答", "考生考试回答表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<考生考试回答表>("LoveKaoExamModel.FK_会员问答题回答_会员考试回答", "考生考试回答表", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LoveKaoExamModel", Name="考生选词填空回答表")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class 考生选词填空回答表 : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 考生选词填空回答表 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="考生考试回答ID">考生考试回答ID 属性的初始值。</param>
        /// <param name="该空ID">该空ID 属性的初始值。</param>
        /// <param name="该空的回答ID">该空的回答ID 属性的初始值。</param>
        public static 考生选词填空回答表 Create考生选词填空回答表(global::System.Guid id, global::System.Guid 考生考试回答ID, global::System.Guid 该空ID, global::System.Guid 该空的回答ID)
        {
            考生选词填空回答表 考生选词填空回答表 = new 考生选词填空回答表();
            考生选词填空回答表.ID = id;
            考生选词填空回答表.考生考试回答ID = 考生考试回答ID;
            考生选词填空回答表.该空ID = 该空ID;
            考生选词填空回答表.该空的回答ID = 该空的回答ID;
            return 考生选词填空回答表;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 考生考试回答ID
        {
            get
            {
                return _考生考试回答ID;
            }
            set
            {
                On考生考试回答IDChanging(value);
                ReportPropertyChanging("考生考试回答ID");
                _考生考试回答ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("考生考试回答ID");
                On考生考试回答IDChanged();
            }
        }
        private global::System.Guid _考生考试回答ID;
        partial void On考生考试回答IDChanging(global::System.Guid value);
        partial void On考生考试回答IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 该空ID
        {
            get
            {
                return _该空ID;
            }
            set
            {
                On该空IDChanging(value);
                ReportPropertyChanging("该空ID");
                _该空ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("该空ID");
                On该空IDChanged();
            }
        }
        private global::System.Guid _该空ID;
        partial void On该空IDChanging(global::System.Guid value);
        partial void On该空IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 该空的回答ID
        {
            get
            {
                return _该空的回答ID;
            }
            set
            {
                On该空的回答IDChanging(value);
                ReportPropertyChanging("该空的回答ID");
                _该空的回答ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("该空的回答ID");
                On该空的回答IDChanged();
            }
        }
        private global::System.Guid _该空的回答ID;
        partial void On该空的回答IDChanging(global::System.Guid value);
        partial void On该空的回答IDChanged();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_会员选词填空回答_会员考试回答", "考生考试回答表")]
        public 考生考试回答表 考生考试回答表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<考生考试回答表>("LoveKaoExamModel.FK_会员选词填空回答_会员考试回答", "考生考试回答表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<考生考试回答表>("LoveKaoExamModel.FK_会员选词填空回答_会员考试回答", "考生考试回答表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<考生考试回答表> 考生考试回答表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<考生考试回答表>("LoveKaoExamModel.FK_会员选词填空回答_会员考试回答", "考生考试回答表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<考生考试回答表>("LoveKaoExamModel.FK_会员选词填空回答_会员考试回答", "考生考试回答表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_会员选词填空回答_空格历史", "自由题空格表")]
        public 自由题空格表 自由题空格表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<自由题空格表>("LoveKaoExamModel.FK_会员选词填空回答_空格历史", "自由题空格表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<自由题空格表>("LoveKaoExamModel.FK_会员选词填空回答_空格历史", "自由题空格表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<自由题空格表> 自由题空格表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<自由题空格表>("LoveKaoExamModel.FK_会员选词填空回答_空格历史", "自由题空格表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<自由题空格表>("LoveKaoExamModel.FK_会员选词填空回答_空格历史", "自由题空格表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_会员选词填空回答_选项历史", "自由题选项表")]
        public 自由题选项表 自由题选项表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<自由题选项表>("LoveKaoExamModel.FK_会员选词填空回答_选项历史", "自由题选项表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<自由题选项表>("LoveKaoExamModel.FK_会员选词填空回答_选项历史", "自由题选项表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<自由题选项表> 自由题选项表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<自由题选项表>("LoveKaoExamModel.FK_会员选词填空回答_选项历史", "自由题选项表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<自由题选项表>("LoveKaoExamModel.FK_会员选词填空回答_选项历史", "自由题选项表", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LoveKaoExamModel", Name="考生做过的试卷表")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class 考生做过的试卷表 : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 考生做过的试卷表 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="考生ID">考生ID 属性的初始值。</param>
        /// <param name="答题开始时间">答题开始时间 属性的初始值。</param>
        /// <param name="客观题得分">客观题得分 属性的初始值。</param>
        /// <param name="主观题得分">主观题得分 属性的初始值。</param>
        /// <param name="是否是已提交的试卷">是否是已提交的试卷 属性的初始值。</param>
        /// <param name="批改状态">批改状态 属性的初始值。</param>
        /// <param name="相关ID">相关ID 属性的初始值。</param>
        /// <param name="类型">类型 属性的初始值。</param>
        public static 考生做过的试卷表 Create考生做过的试卷表(global::System.Guid id, global::System.Guid 考生ID, global::System.DateTime 答题开始时间, global::System.Decimal 客观题得分, global::System.Decimal 主观题得分, global::System.Boolean 是否是已提交的试卷, global::System.Byte 批改状态, global::System.Guid 相关ID, global::System.Byte 类型)
        {
            考生做过的试卷表 考生做过的试卷表 = new 考生做过的试卷表();
            考生做过的试卷表.ID = id;
            考生做过的试卷表.考生ID = 考生ID;
            考生做过的试卷表.答题开始时间 = 答题开始时间;
            考生做过的试卷表.客观题得分 = 客观题得分;
            考生做过的试卷表.主观题得分 = 主观题得分;
            考生做过的试卷表.是否是已提交的试卷 = 是否是已提交的试卷;
            考生做过的试卷表.批改状态 = 批改状态;
            考生做过的试卷表.相关ID = 相关ID;
            考生做过的试卷表.类型 = 类型;
            return 考生做过的试卷表;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 考生ID
        {
            get
            {
                return _考生ID;
            }
            set
            {
                On考生IDChanging(value);
                ReportPropertyChanging("考生ID");
                _考生ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("考生ID");
                On考生IDChanged();
            }
        }
        private global::System.Guid _考生ID;
        partial void On考生IDChanging(global::System.Guid value);
        partial void On考生IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime 答题开始时间
        {
            get
            {
                return _答题开始时间;
            }
            set
            {
                On答题开始时间Changing(value);
                ReportPropertyChanging("答题开始时间");
                _答题开始时间 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("答题开始时间");
                On答题开始时间Changed();
            }
        }
        private global::System.DateTime _答题开始时间;
        partial void On答题开始时间Changing(global::System.DateTime value);
        partial void On答题开始时间Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> 答题结束时间
        {
            get
            {
                return _答题结束时间;
            }
            set
            {
                On答题结束时间Changing(value);
                ReportPropertyChanging("答题结束时间");
                _答题结束时间 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("答题结束时间");
                On答题结束时间Changed();
            }
        }
        private Nullable<global::System.DateTime> _答题结束时间;
        partial void On答题结束时间Changing(Nullable<global::System.DateTime> value);
        partial void On答题结束时间Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal 客观题得分
        {
            get
            {
                return _客观题得分;
            }
            set
            {
                On客观题得分Changing(value);
                ReportPropertyChanging("客观题得分");
                _客观题得分 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("客观题得分");
                On客观题得分Changed();
            }
        }
        private global::System.Decimal _客观题得分;
        partial void On客观题得分Changing(global::System.Decimal value);
        partial void On客观题得分Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal 主观题得分
        {
            get
            {
                return _主观题得分;
            }
            set
            {
                On主观题得分Changing(value);
                ReportPropertyChanging("主观题得分");
                _主观题得分 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("主观题得分");
                On主观题得分Changed();
            }
        }
        private global::System.Decimal _主观题得分;
        partial void On主观题得分Changing(global::System.Decimal value);
        partial void On主观题得分Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean 是否是已提交的试卷
        {
            get
            {
                return _是否是已提交的试卷;
            }
            set
            {
                On是否是已提交的试卷Changing(value);
                ReportPropertyChanging("是否是已提交的试卷");
                _是否是已提交的试卷 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("是否是已提交的试卷");
                On是否是已提交的试卷Changed();
            }
        }
        private global::System.Boolean _是否是已提交的试卷;
        partial void On是否是已提交的试卷Changing(global::System.Boolean value);
        partial void On是否是已提交的试卷Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte 批改状态
        {
            get
            {
                return _批改状态;
            }
            set
            {
                On批改状态Changing(value);
                ReportPropertyChanging("批改状态");
                _批改状态 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("批改状态");
                On批改状态Changed();
            }
        }
        private global::System.Byte _批改状态;
        partial void On批改状态Changing(global::System.Byte value);
        partial void On批改状态Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 相关ID
        {
            get
            {
                return _相关ID;
            }
            set
            {
                On相关IDChanging(value);
                ReportPropertyChanging("相关ID");
                _相关ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("相关ID");
                On相关IDChanged();
            }
        }
        private global::System.Guid _相关ID;
        partial void On相关IDChanging(global::System.Guid value);
        partial void On相关IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte 类型
        {
            get
            {
                return _类型;
            }
            set
            {
                On类型Changing(value);
                ReportPropertyChanging("类型");
                _类型 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("类型");
                On类型Changed();
            }
        }
        private global::System.Byte _类型;
        partial void On类型Changing(global::System.Byte value);
        partial void On类型Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> 批改时间
        {
            get
            {
                return _批改时间;
            }
            set
            {
                On批改时间Changing(value);
                ReportPropertyChanging("批改时间");
                _批改时间 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("批改时间");
                On批改时间Changed();
            }
        }
        private Nullable<global::System.DateTime> _批改时间;
        partial void On批改时间Changing(Nullable<global::System.DateTime> value);
        partial void On批改时间Changed();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_会员考试回答_会员做过的试卷", "考生考试回答表")]
        public EntityCollection<考生考试回答表> 考生考试回答表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<考生考试回答表>("LoveKaoExamModel.FK_会员考试回答_会员做过的试卷", "考生考试回答表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<考生考试回答表>("LoveKaoExamModel.FK_会员考试回答_会员做过的试卷", "考生考试回答表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_会员做过的试卷表_用户表", "用户表")]
        public 用户表 用户表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<用户表>("LoveKaoExamModel.FK_会员做过的试卷表_用户表", "用户表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<用户表>("LoveKaoExamModel.FK_会员做过的试卷表_用户表", "用户表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<用户表> 用户表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<用户表>("LoveKaoExamModel.FK_会员做过的试卷表_用户表", "用户表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<用户表>("LoveKaoExamModel.FK_会员做过的试卷表_用户表", "用户表", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LoveKaoExamModel", Name="考试设置表")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class 考试设置表 : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 考试设置表 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="试卷内容ID">试卷内容ID 属性的初始值。</param>
        /// <param name="考试开始时间">考试开始时间 属性的初始值。</param>
        /// <param name="考试结束时间">考试结束时间 属性的初始值。</param>
        /// <param name="考试时长">考试时长 属性的初始值。</param>
        /// <param name="及格条件">及格条件 属性的初始值。</param>
        /// <param name="是否公布考试结果">是否公布考试结果 属性的初始值。</param>
        /// <param name="设置人ID">设置人ID 属性的初始值。</param>
        /// <param name="设置时间">设置时间 属性的初始值。</param>
        /// <param name="是否删除">是否删除 属性的初始值。</param>
        public static 考试设置表 Create考试设置表(global::System.Guid id, global::System.Guid 试卷内容ID, global::System.DateTime 考试开始时间, global::System.DateTime 考试结束时间, global::System.Int16 考试时长, global::System.Int32 及格条件, global::System.Boolean 是否公布考试结果, global::System.Guid 设置人ID, global::System.DateTime 设置时间, global::System.Boolean 是否删除)
        {
            考试设置表 考试设置表 = new 考试设置表();
            考试设置表.ID = id;
            考试设置表.试卷内容ID = 试卷内容ID;
            考试设置表.考试开始时间 = 考试开始时间;
            考试设置表.考试结束时间 = 考试结束时间;
            考试设置表.考试时长 = 考试时长;
            考试设置表.及格条件 = 及格条件;
            考试设置表.是否公布考试结果 = 是否公布考试结果;
            考试设置表.设置人ID = 设置人ID;
            考试设置表.设置时间 = 设置时间;
            考试设置表.是否删除 = 是否删除;
            return 考试设置表;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 试卷内容ID
        {
            get
            {
                return _试卷内容ID;
            }
            set
            {
                On试卷内容IDChanging(value);
                ReportPropertyChanging("试卷内容ID");
                _试卷内容ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("试卷内容ID");
                On试卷内容IDChanged();
            }
        }
        private global::System.Guid _试卷内容ID;
        partial void On试卷内容IDChanging(global::System.Guid value);
        partial void On试卷内容IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime 考试开始时间
        {
            get
            {
                return _考试开始时间;
            }
            set
            {
                On考试开始时间Changing(value);
                ReportPropertyChanging("考试开始时间");
                _考试开始时间 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("考试开始时间");
                On考试开始时间Changed();
            }
        }
        private global::System.DateTime _考试开始时间;
        partial void On考试开始时间Changing(global::System.DateTime value);
        partial void On考试开始时间Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime 考试结束时间
        {
            get
            {
                return _考试结束时间;
            }
            set
            {
                On考试结束时间Changing(value);
                ReportPropertyChanging("考试结束时间");
                _考试结束时间 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("考试结束时间");
                On考试结束时间Changed();
            }
        }
        private global::System.DateTime _考试结束时间;
        partial void On考试结束时间Changing(global::System.DateTime value);
        partial void On考试结束时间Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int16 考试时长
        {
            get
            {
                return _考试时长;
            }
            set
            {
                On考试时长Changing(value);
                ReportPropertyChanging("考试时长");
                _考试时长 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("考试时长");
                On考试时长Changed();
            }
        }
        private global::System.Int16 _考试时长;
        partial void On考试时长Changing(global::System.Int16 value);
        partial void On考试时长Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 及格条件
        {
            get
            {
                return _及格条件;
            }
            set
            {
                On及格条件Changing(value);
                ReportPropertyChanging("及格条件");
                _及格条件 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("及格条件");
                On及格条件Changed();
            }
        }
        private global::System.Int32 _及格条件;
        partial void On及格条件Changing(global::System.Int32 value);
        partial void On及格条件Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean 是否公布考试结果
        {
            get
            {
                return _是否公布考试结果;
            }
            set
            {
                On是否公布考试结果Changing(value);
                ReportPropertyChanging("是否公布考试结果");
                _是否公布考试结果 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("是否公布考试结果");
                On是否公布考试结果Changed();
            }
        }
        private global::System.Boolean _是否公布考试结果;
        partial void On是否公布考试结果Changing(global::System.Boolean value);
        partial void On是否公布考试结果Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 设置人ID
        {
            get
            {
                return _设置人ID;
            }
            set
            {
                On设置人IDChanging(value);
                ReportPropertyChanging("设置人ID");
                _设置人ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("设置人ID");
                On设置人IDChanged();
            }
        }
        private global::System.Guid _设置人ID;
        partial void On设置人IDChanging(global::System.Guid value);
        partial void On设置人IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime 设置时间
        {
            get
            {
                return _设置时间;
            }
            set
            {
                On设置时间Changing(value);
                ReportPropertyChanging("设置时间");
                _设置时间 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("设置时间");
                On设置时间Changed();
            }
        }
        private global::System.DateTime _设置时间;
        partial void On设置时间Changing(global::System.DateTime value);
        partial void On设置时间Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean 是否删除
        {
            get
            {
                return _是否删除;
            }
            set
            {
                On是否删除Changing(value);
                ReportPropertyChanging("是否删除");
                _是否删除 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("是否删除");
                On是否删除Changed();
            }
        }
        private global::System.Boolean _是否删除;
        partial void On是否删除Changing(global::System.Boolean value);
        partial void On是否删除Changed();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_考试设置_试卷内容表", "试卷内容表")]
        public 试卷内容表 试卷内容表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试卷内容表>("LoveKaoExamModel.FK_考试设置_试卷内容表", "试卷内容表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试卷内容表>("LoveKaoExamModel.FK_考试设置_试卷内容表", "试卷内容表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<试卷内容表> 试卷内容表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试卷内容表>("LoveKaoExamModel.FK_考试设置_试卷内容表", "试卷内容表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<试卷内容表>("LoveKaoExamModel.FK_考试设置_试卷内容表", "试卷内容表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_考试设置表_用户表", "用户表")]
        public 用户表 用户表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<用户表>("LoveKaoExamModel.FK_考试设置表_用户表", "用户表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<用户表>("LoveKaoExamModel.FK_考试设置表_用户表", "用户表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<用户表> 用户表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<用户表>("LoveKaoExamModel.FK_考试设置表_用户表", "用户表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<用户表>("LoveKaoExamModel.FK_考试设置表_用户表", "用户表", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LoveKaoExamModel", Name="连线题答案表")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class 连线题答案表 : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 连线题答案表 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="试题内容ID">试题内容ID 属性的初始值。</param>
        /// <param name="左边ID">左边ID 属性的初始值。</param>
        /// <param name="右边ID">右边ID 属性的初始值。</param>
        /// <param name="顺序">顺序 属性的初始值。</param>
        public static 连线题答案表 Create连线题答案表(global::System.Guid id, global::System.Guid 试题内容ID, global::System.Guid 左边ID, global::System.Guid 右边ID, global::System.Byte 顺序)
        {
            连线题答案表 连线题答案表 = new 连线题答案表();
            连线题答案表.ID = id;
            连线题答案表.试题内容ID = 试题内容ID;
            连线题答案表.左边ID = 左边ID;
            连线题答案表.右边ID = 右边ID;
            连线题答案表.顺序 = 顺序;
            return 连线题答案表;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 试题内容ID
        {
            get
            {
                return _试题内容ID;
            }
            set
            {
                On试题内容IDChanging(value);
                ReportPropertyChanging("试题内容ID");
                _试题内容ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("试题内容ID");
                On试题内容IDChanged();
            }
        }
        private global::System.Guid _试题内容ID;
        partial void On试题内容IDChanging(global::System.Guid value);
        partial void On试题内容IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 左边ID
        {
            get
            {
                return _左边ID;
            }
            set
            {
                On左边IDChanging(value);
                ReportPropertyChanging("左边ID");
                _左边ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("左边ID");
                On左边IDChanged();
            }
        }
        private global::System.Guid _左边ID;
        partial void On左边IDChanging(global::System.Guid value);
        partial void On左边IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 右边ID
        {
            get
            {
                return _右边ID;
            }
            set
            {
                On右边IDChanging(value);
                ReportPropertyChanging("右边ID");
                _右边ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("右边ID");
                On右边IDChanged();
            }
        }
        private global::System.Guid _右边ID;
        partial void On右边IDChanging(global::System.Guid value);
        partial void On右边IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte 顺序
        {
            get
            {
                return _顺序;
            }
            set
            {
                On顺序Changing(value);
                ReportPropertyChanging("顺序");
                _顺序 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("顺序");
                On顺序Changed();
            }
        }
        private global::System.Byte _顺序;
        partial void On顺序Changing(global::System.Byte value);
        partial void On顺序Changed();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_连线题答案历史_连线题选项历史", "连线题选项表")]
        public 连线题选项表 连线题选项表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<连线题选项表>("LoveKaoExamModel.FK_连线题答案历史_连线题选项历史", "连线题选项表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<连线题选项表>("LoveKaoExamModel.FK_连线题答案历史_连线题选项历史", "连线题选项表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<连线题选项表> 连线题选项表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<连线题选项表>("LoveKaoExamModel.FK_连线题答案历史_连线题选项历史", "连线题选项表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<连线题选项表>("LoveKaoExamModel.FK_连线题答案历史_连线题选项历史", "连线题选项表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_连线题答案历史_连线题选项历史1", "连线题选项表")]
        public 连线题选项表 连线题选项表1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<连线题选项表>("LoveKaoExamModel.FK_连线题答案历史_连线题选项历史1", "连线题选项表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<连线题选项表>("LoveKaoExamModel.FK_连线题答案历史_连线题选项历史1", "连线题选项表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<连线题选项表> 连线题选项表1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<连线题选项表>("LoveKaoExamModel.FK_连线题答案历史_连线题选项历史1", "连线题选项表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<连线题选项表>("LoveKaoExamModel.FK_连线题答案历史_连线题选项历史1", "连线题选项表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_连线题答案历史_题目历史", "试题内容表")]
        public 试题内容表 试题内容表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试题内容表>("LoveKaoExamModel.FK_连线题答案历史_题目历史", "试题内容表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试题内容表>("LoveKaoExamModel.FK_连线题答案历史_题目历史", "试题内容表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<试题内容表> 试题内容表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试题内容表>("LoveKaoExamModel.FK_连线题答案历史_题目历史", "试题内容表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<试题内容表>("LoveKaoExamModel.FK_连线题答案历史_题目历史", "试题内容表", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LoveKaoExamModel", Name="连线题选项表")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class 连线题选项表 : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 连线题选项表 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="试题内容ID">试题内容ID 属性的初始值。</param>
        /// <param name="选项内容HTML">选项内容HTML 属性的初始值。</param>
        /// <param name="选项内容文本">选项内容文本 属性的初始值。</param>
        /// <param name="连线标记">连线标记 属性的初始值。</param>
        /// <param name="顺序">顺序 属性的初始值。</param>
        public static 连线题选项表 Create连线题选项表(global::System.Guid id, global::System.Guid 试题内容ID, global::System.String 选项内容HTML, global::System.String 选项内容文本, global::System.Byte 连线标记, global::System.Byte 顺序)
        {
            连线题选项表 连线题选项表 = new 连线题选项表();
            连线题选项表.ID = id;
            连线题选项表.试题内容ID = 试题内容ID;
            连线题选项表.选项内容HTML = 选项内容HTML;
            连线题选项表.选项内容文本 = 选项内容文本;
            连线题选项表.连线标记 = 连线标记;
            连线题选项表.顺序 = 顺序;
            return 连线题选项表;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 试题内容ID
        {
            get
            {
                return _试题内容ID;
            }
            set
            {
                On试题内容IDChanging(value);
                ReportPropertyChanging("试题内容ID");
                _试题内容ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("试题内容ID");
                On试题内容IDChanged();
            }
        }
        private global::System.Guid _试题内容ID;
        partial void On试题内容IDChanging(global::System.Guid value);
        partial void On试题内容IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String 选项内容HTML
        {
            get
            {
                return _选项内容HTML;
            }
            set
            {
                On选项内容HTMLChanging(value);
                ReportPropertyChanging("选项内容HTML");
                _选项内容HTML = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("选项内容HTML");
                On选项内容HTMLChanged();
            }
        }
        private global::System.String _选项内容HTML;
        partial void On选项内容HTMLChanging(global::System.String value);
        partial void On选项内容HTMLChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String 选项内容文本
        {
            get
            {
                return _选项内容文本;
            }
            set
            {
                On选项内容文本Changing(value);
                ReportPropertyChanging("选项内容文本");
                _选项内容文本 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("选项内容文本");
                On选项内容文本Changed();
            }
        }
        private global::System.String _选项内容文本;
        partial void On选项内容文本Changing(global::System.String value);
        partial void On选项内容文本Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte 连线标记
        {
            get
            {
                return _连线标记;
            }
            set
            {
                On连线标记Changing(value);
                ReportPropertyChanging("连线标记");
                _连线标记 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("连线标记");
                On连线标记Changed();
            }
        }
        private global::System.Byte _连线标记;
        partial void On连线标记Changing(global::System.Byte value);
        partial void On连线标记Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte 顺序
        {
            get
            {
                return _顺序;
            }
            set
            {
                On顺序Changing(value);
                ReportPropertyChanging("顺序");
                _顺序 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("顺序");
                On顺序Changed();
            }
        }
        private global::System.Byte _顺序;
        partial void On顺序Changing(global::System.Byte value);
        partial void On顺序Changed();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_会员连线题回答_连线题选项历史", "考生连线题回答表")]
        public EntityCollection<考生连线题回答表> 考生连线题回答表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<考生连线题回答表>("LoveKaoExamModel.FK_会员连线题回答_连线题选项历史", "考生连线题回答表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<考生连线题回答表>("LoveKaoExamModel.FK_会员连线题回答_连线题选项历史", "考生连线题回答表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_会员连线题回答_连线题选项历史1", "考生连线题回答表")]
        public EntityCollection<考生连线题回答表> 考生连线题回答表1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<考生连线题回答表>("LoveKaoExamModel.FK_会员连线题回答_连线题选项历史1", "考生连线题回答表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<考生连线题回答表>("LoveKaoExamModel.FK_会员连线题回答_连线题选项历史1", "考生连线题回答表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_连线题答案历史_连线题选项历史", "连线题答案表")]
        public EntityCollection<连线题答案表> 连线题答案表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<连线题答案表>("LoveKaoExamModel.FK_连线题答案历史_连线题选项历史", "连线题答案表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<连线题答案表>("LoveKaoExamModel.FK_连线题答案历史_连线题选项历史", "连线题答案表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_连线题答案历史_连线题选项历史1", "连线题答案表")]
        public EntityCollection<连线题答案表> 连线题答案表1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<连线题答案表>("LoveKaoExamModel.FK_连线题答案历史_连线题选项历史1", "连线题答案表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<连线题答案表>("LoveKaoExamModel.FK_连线题答案历史_连线题选项历史1", "连线题答案表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_连线题选项历史_题目历史", "试题内容表")]
        public 试题内容表 试题内容表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试题内容表>("LoveKaoExamModel.FK_连线题选项历史_题目历史", "试题内容表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试题内容表>("LoveKaoExamModel.FK_连线题选项历史_题目历史", "试题内容表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<试题内容表> 试题内容表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试题内容表>("LoveKaoExamModel.FK_连线题选项历史_题目历史", "试题内容表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<试题内容表>("LoveKaoExamModel.FK_连线题选项历史_题目历史", "试题内容表", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LoveKaoExamModel", Name="练习设置表")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class 练习设置表 : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 练习设置表 对象。
        /// </summary>
        /// <param name="试卷内容ID">试卷内容ID 属性的初始值。</param>
        /// <param name="考试时长">考试时长 属性的初始值。</param>
        /// <param name="及格条件">及格条件 属性的初始值。</param>
        /// <param name="设置人ID">设置人ID 属性的初始值。</param>
        /// <param name="设置时间">设置时间 属性的初始值。</param>
        /// <param name="是否删除">是否删除 属性的初始值。</param>
        public static 练习设置表 Create练习设置表(global::System.Guid 试卷内容ID, global::System.Int16 考试时长, global::System.Int32 及格条件, global::System.Guid 设置人ID, global::System.DateTime 设置时间, global::System.Boolean 是否删除)
        {
            练习设置表 练习设置表 = new 练习设置表();
            练习设置表.试卷内容ID = 试卷内容ID;
            练习设置表.考试时长 = 考试时长;
            练习设置表.及格条件 = 及格条件;
            练习设置表.设置人ID = 设置人ID;
            练习设置表.设置时间 = 设置时间;
            练习设置表.是否删除 = 是否删除;
            return 练习设置表;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 试卷内容ID
        {
            get
            {
                return _试卷内容ID;
            }
            set
            {
                if (_试卷内容ID != value)
                {
                    On试卷内容IDChanging(value);
                    ReportPropertyChanging("试卷内容ID");
                    _试卷内容ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("试卷内容ID");
                    On试卷内容IDChanged();
                }
            }
        }
        private global::System.Guid _试卷内容ID;
        partial void On试卷内容IDChanging(global::System.Guid value);
        partial void On试卷内容IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int16 考试时长
        {
            get
            {
                return _考试时长;
            }
            set
            {
                On考试时长Changing(value);
                ReportPropertyChanging("考试时长");
                _考试时长 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("考试时长");
                On考试时长Changed();
            }
        }
        private global::System.Int16 _考试时长;
        partial void On考试时长Changing(global::System.Int16 value);
        partial void On考试时长Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 及格条件
        {
            get
            {
                return _及格条件;
            }
            set
            {
                On及格条件Changing(value);
                ReportPropertyChanging("及格条件");
                _及格条件 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("及格条件");
                On及格条件Changed();
            }
        }
        private global::System.Int32 _及格条件;
        partial void On及格条件Changing(global::System.Int32 value);
        partial void On及格条件Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 设置人ID
        {
            get
            {
                return _设置人ID;
            }
            set
            {
                On设置人IDChanging(value);
                ReportPropertyChanging("设置人ID");
                _设置人ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("设置人ID");
                On设置人IDChanged();
            }
        }
        private global::System.Guid _设置人ID;
        partial void On设置人IDChanging(global::System.Guid value);
        partial void On设置人IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime 设置时间
        {
            get
            {
                return _设置时间;
            }
            set
            {
                On设置时间Changing(value);
                ReportPropertyChanging("设置时间");
                _设置时间 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("设置时间");
                On设置时间Changed();
            }
        }
        private global::System.DateTime _设置时间;
        partial void On设置时间Changing(global::System.DateTime value);
        partial void On设置时间Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean 是否删除
        {
            get
            {
                return _是否删除;
            }
            set
            {
                On是否删除Changing(value);
                ReportPropertyChanging("是否删除");
                _是否删除 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("是否删除");
                On是否删除Changed();
            }
        }
        private global::System.Boolean _是否删除;
        partial void On是否删除Changing(global::System.Boolean value);
        partial void On是否删除Changed();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_练习设置表_试卷内容表", "试卷内容表")]
        public 试卷内容表 试卷内容表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试卷内容表>("LoveKaoExamModel.FK_练习设置表_试卷内容表", "试卷内容表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试卷内容表>("LoveKaoExamModel.FK_练习设置表_试卷内容表", "试卷内容表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<试卷内容表> 试卷内容表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试卷内容表>("LoveKaoExamModel.FK_练习设置表_试卷内容表", "试卷内容表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<试卷内容表>("LoveKaoExamModel.FK_练习设置表_试卷内容表", "试卷内容表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_练习设置表_用户表", "用户表")]
        public 用户表 用户表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<用户表>("LoveKaoExamModel.FK_练习设置表_用户表", "用户表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<用户表>("LoveKaoExamModel.FK_练习设置表_用户表", "用户表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<用户表> 用户表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<用户表>("LoveKaoExamModel.FK_练习设置表_用户表", "用户表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<用户表>("LoveKaoExamModel.FK_练习设置表_用户表", "用户表", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LoveKaoExamModel", Name="判断题答案表")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class 判断题答案表 : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 判断题答案表 对象。
        /// </summary>
        /// <param name="试题内容ID">试题内容ID 属性的初始值。</param>
        /// <param name="答案">答案 属性的初始值。</param>
        public static 判断题答案表 Create判断题答案表(global::System.Guid 试题内容ID, global::System.Boolean 答案)
        {
            判断题答案表 判断题答案表 = new 判断题答案表();
            判断题答案表.试题内容ID = 试题内容ID;
            判断题答案表.答案 = 答案;
            return 判断题答案表;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 试题内容ID
        {
            get
            {
                return _试题内容ID;
            }
            set
            {
                if (_试题内容ID != value)
                {
                    On试题内容IDChanging(value);
                    ReportPropertyChanging("试题内容ID");
                    _试题内容ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("试题内容ID");
                    On试题内容IDChanged();
                }
            }
        }
        private global::System.Guid _试题内容ID;
        partial void On试题内容IDChanging(global::System.Guid value);
        partial void On试题内容IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean 答案
        {
            get
            {
                return _答案;
            }
            set
            {
                On答案Changing(value);
                ReportPropertyChanging("答案");
                _答案 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("答案");
                On答案Changed();
            }
        }
        private global::System.Boolean _答案;
        partial void On答案Changing(global::System.Boolean value);
        partial void On答案Changed();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_判断题答案历史_题目历史", "试题内容表")]
        public 试题内容表 试题内容表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试题内容表>("LoveKaoExamModel.FK_判断题答案历史_题目历史", "试题内容表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试题内容表>("LoveKaoExamModel.FK_判断题答案历史_题目历史", "试题内容表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<试题内容表> 试题内容表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试题内容表>("LoveKaoExamModel.FK_判断题答案历史_题目历史", "试题内容表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<试题内容表>("LoveKaoExamModel.FK_判断题答案历史_题目历史", "试题内容表", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LoveKaoExamModel", Name="试卷大题中试题表")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class 试卷大题中试题表 : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 试卷大题中试题表 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="试卷中大题ID">试卷中大题ID 属性的初始值。</param>
        /// <param name="试题内容ID">试题内容ID 属性的初始值。</param>
        /// <param name="每小题分值">每小题分值 属性的初始值。</param>
        /// <param name="顺序">顺序 属性的初始值。</param>
        public static 试卷大题中试题表 Create试卷大题中试题表(global::System.Guid id, global::System.Guid 试卷中大题ID, global::System.Guid 试题内容ID, global::System.Decimal 每小题分值, global::System.Int16 顺序)
        {
            试卷大题中试题表 试卷大题中试题表 = new 试卷大题中试题表();
            试卷大题中试题表.ID = id;
            试卷大题中试题表.试卷中大题ID = 试卷中大题ID;
            试卷大题中试题表.试题内容ID = 试题内容ID;
            试卷大题中试题表.每小题分值 = 每小题分值;
            试卷大题中试题表.顺序 = 顺序;
            return 试卷大题中试题表;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 试卷中大题ID
        {
            get
            {
                return _试卷中大题ID;
            }
            set
            {
                On试卷中大题IDChanging(value);
                ReportPropertyChanging("试卷中大题ID");
                _试卷中大题ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("试卷中大题ID");
                On试卷中大题IDChanged();
            }
        }
        private global::System.Guid _试卷中大题ID;
        partial void On试卷中大题IDChanging(global::System.Guid value);
        partial void On试卷中大题IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 试题内容ID
        {
            get
            {
                return _试题内容ID;
            }
            set
            {
                On试题内容IDChanging(value);
                ReportPropertyChanging("试题内容ID");
                _试题内容ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("试题内容ID");
                On试题内容IDChanged();
            }
        }
        private global::System.Guid _试题内容ID;
        partial void On试题内容IDChanging(global::System.Guid value);
        partial void On试题内容IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal 每小题分值
        {
            get
            {
                return _每小题分值;
            }
            set
            {
                On每小题分值Changing(value);
                ReportPropertyChanging("每小题分值");
                _每小题分值 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("每小题分值");
                On每小题分值Changed();
            }
        }
        private global::System.Decimal _每小题分值;
        partial void On每小题分值Changing(global::System.Decimal value);
        partial void On每小题分值Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int16 顺序
        {
            get
            {
                return _顺序;
            }
            set
            {
                On顺序Changing(value);
                ReportPropertyChanging("顺序");
                _顺序 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("顺序");
                On顺序Changed();
            }
        }
        private global::System.Int16 _顺序;
        partial void On顺序Changing(global::System.Int16 value);
        partial void On顺序Changed();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_会员考试回答_试卷题目历史", "考生考试回答表")]
        public EntityCollection<考生考试回答表> 考生考试回答表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<考生考试回答表>("LoveKaoExamModel.FK_会员考试回答_试卷题目历史", "考生考试回答表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<考生考试回答表>("LoveKaoExamModel.FK_会员考试回答_试卷题目历史", "考生考试回答表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_试卷大题中试题表_试题内容表", "试题内容表")]
        public 试题内容表 试题内容表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试题内容表>("LoveKaoExamModel.FK_试卷大题中试题表_试题内容表", "试题内容表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试题内容表>("LoveKaoExamModel.FK_试卷大题中试题表_试题内容表", "试题内容表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<试题内容表> 试题内容表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试题内容表>("LoveKaoExamModel.FK_试卷大题中试题表_试题内容表", "试题内容表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<试题内容表>("LoveKaoExamModel.FK_试卷大题中试题表_试题内容表", "试题内容表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_试卷题目历史_试卷题型历史", "试卷中大题表")]
        public 试卷中大题表 试卷中大题表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试卷中大题表>("LoveKaoExamModel.FK_试卷题目历史_试卷题型历史", "试卷中大题表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试卷中大题表>("LoveKaoExamModel.FK_试卷题目历史_试卷题型历史", "试卷中大题表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<试卷中大题表> 试卷中大题表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试卷中大题表>("LoveKaoExamModel.FK_试卷题目历史_试卷题型历史", "试卷中大题表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<试卷中大题表>("LoveKaoExamModel.FK_试卷题目历史_试卷题型历史", "试卷中大题表", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LoveKaoExamModel", Name="试卷内容表")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class 试卷内容表 : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 试卷内容表 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="试卷外部信息ID">试卷外部信息ID 属性的初始值。</param>
        /// <param name="名称">名称 属性的初始值。</param>
        /// <param name="说明">说明 属性的初始值。</param>
        /// <param name="提交人ID">提交人ID 属性的初始值。</param>
        /// <param name="提交时间">提交时间 属性的初始值。</param>
        /// <param name="提交备注">提交备注 属性的初始值。</param>
        public static 试卷内容表 Create试卷内容表(global::System.Guid id, global::System.Guid 试卷外部信息ID, global::System.String 名称, global::System.String 说明, global::System.Guid 提交人ID, global::System.DateTime 提交时间, global::System.String 提交备注)
        {
            试卷内容表 试卷内容表 = new 试卷内容表();
            试卷内容表.ID = id;
            试卷内容表.试卷外部信息ID = 试卷外部信息ID;
            试卷内容表.名称 = 名称;
            试卷内容表.说明 = 说明;
            试卷内容表.提交人ID = 提交人ID;
            试卷内容表.提交时间 = 提交时间;
            试卷内容表.提交备注 = 提交备注;
            return 试卷内容表;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 试卷外部信息ID
        {
            get
            {
                return _试卷外部信息ID;
            }
            set
            {
                On试卷外部信息IDChanging(value);
                ReportPropertyChanging("试卷外部信息ID");
                _试卷外部信息ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("试卷外部信息ID");
                On试卷外部信息IDChanged();
            }
        }
        private global::System.Guid _试卷外部信息ID;
        partial void On试卷外部信息IDChanging(global::System.Guid value);
        partial void On试卷外部信息IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String 名称
        {
            get
            {
                return _名称;
            }
            set
            {
                On名称Changing(value);
                ReportPropertyChanging("名称");
                _名称 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("名称");
                On名称Changed();
            }
        }
        private global::System.String _名称;
        partial void On名称Changing(global::System.String value);
        partial void On名称Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String 说明
        {
            get
            {
                return _说明;
            }
            set
            {
                On说明Changing(value);
                ReportPropertyChanging("说明");
                _说明 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("说明");
                On说明Changed();
            }
        }
        private global::System.String _说明;
        partial void On说明Changing(global::System.String value);
        partial void On说明Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 提交人ID
        {
            get
            {
                return _提交人ID;
            }
            set
            {
                On提交人IDChanging(value);
                ReportPropertyChanging("提交人ID");
                _提交人ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("提交人ID");
                On提交人IDChanged();
            }
        }
        private global::System.Guid _提交人ID;
        partial void On提交人IDChanging(global::System.Guid value);
        partial void On提交人IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime 提交时间
        {
            get
            {
                return _提交时间;
            }
            set
            {
                On提交时间Changing(value);
                ReportPropertyChanging("提交时间");
                _提交时间 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("提交时间");
                On提交时间Changed();
            }
        }
        private global::System.DateTime _提交时间;
        partial void On提交时间Changing(global::System.DateTime value);
        partial void On提交时间Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String 提交备注
        {
            get
            {
                return _提交备注;
            }
            set
            {
                On提交备注Changing(value);
                ReportPropertyChanging("提交备注");
                _提交备注 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("提交备注");
                On提交备注Changed();
            }
        }
        private global::System.String _提交备注;
        partial void On提交备注Changing(global::System.String value);
        partial void On提交备注Changed();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_考试设置_试卷内容表", "考试设置表")]
        public EntityCollection<考试设置表> 考试设置表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<考试设置表>("LoveKaoExamModel.FK_考试设置_试卷内容表", "考试设置表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<考试设置表>("LoveKaoExamModel.FK_考试设置_试卷内容表", "考试设置表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_练习设置表_试卷内容表", "练习设置表")]
        public 练习设置表 练习设置表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<练习设置表>("LoveKaoExamModel.FK_练习设置表_试卷内容表", "练习设置表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<练习设置表>("LoveKaoExamModel.FK_练习设置表_试卷内容表", "练习设置表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<练习设置表> 练习设置表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<练习设置表>("LoveKaoExamModel.FK_练习设置表_试卷内容表", "练习设置表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<练习设置表>("LoveKaoExamModel.FK_练习设置表_试卷内容表", "练习设置表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_试卷历史_试卷", "试卷外部信息表")]
        public 试卷外部信息表 试卷外部信息表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试卷外部信息表>("LoveKaoExamModel.FK_试卷历史_试卷", "试卷外部信息表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试卷外部信息表>("LoveKaoExamModel.FK_试卷历史_试卷", "试卷外部信息表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<试卷外部信息表> 试卷外部信息表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试卷外部信息表>("LoveKaoExamModel.FK_试卷历史_试卷", "试卷外部信息表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<试卷外部信息表>("LoveKaoExamModel.FK_试卷历史_试卷", "试卷外部信息表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_试卷内容表_用户表", "用户表")]
        public 用户表 用户表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<用户表>("LoveKaoExamModel.FK_试卷内容表_用户表", "用户表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<用户表>("LoveKaoExamModel.FK_试卷内容表_用户表", "用户表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<用户表> 用户表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<用户表>("LoveKaoExamModel.FK_试卷内容表_用户表", "用户表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<用户表>("LoveKaoExamModel.FK_试卷内容表_用户表", "用户表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_试卷内容表_用户表1", "用户表")]
        public 用户表 用户表1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<用户表>("LoveKaoExamModel.FK_试卷内容表_用户表1", "用户表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<用户表>("LoveKaoExamModel.FK_试卷内容表_用户表1", "用户表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<用户表> 用户表1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<用户表>("LoveKaoExamModel.FK_试卷内容表_用户表1", "用户表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<用户表>("LoveKaoExamModel.FK_试卷内容表_用户表1", "用户表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_试卷中大题表_试卷内容表", "试卷中大题表")]
        public EntityCollection<试卷中大题表> 试卷中大题表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<试卷中大题表>("LoveKaoExamModel.FK_试卷中大题表_试卷内容表", "试卷中大题表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<试卷中大题表>("LoveKaoExamModel.FK_试卷中大题表_试卷内容表", "试卷中大题表", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LoveKaoExamModel", Name="试卷外部信息表")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class 试卷外部信息表 : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 试卷外部信息表 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="名称">名称 属性的初始值。</param>
        /// <param name="说明">说明 属性的初始值。</param>
        /// <param name="创建人ID">创建人ID 属性的初始值。</param>
        /// <param name="创建时间">创建时间 属性的初始值。</param>
        /// <param name="试卷状态Enum">试卷状态Enum 属性的初始值。</param>
        /// <param name="最新更新时间">最新更新时间 属性的初始值。</param>
        /// <param name="总分">总分 属性的初始值。</param>
        /// <param name="试卷内容ID">试卷内容ID 属性的初始值。</param>
        /// <param name="试卷类型">试卷类型 属性的初始值。</param>
        /// <param name="爱考网ID">爱考网ID 属性的初始值。</param>
        public static 试卷外部信息表 Create试卷外部信息表(global::System.Guid id, global::System.String 名称, global::System.String 说明, global::System.Guid 创建人ID, global::System.DateTime 创建时间, global::System.Byte 试卷状态Enum, global::System.DateTime 最新更新时间, global::System.Int32 总分, global::System.Guid 试卷内容ID, global::System.Byte 试卷类型, global::System.Guid 爱考网ID)
        {
            试卷外部信息表 试卷外部信息表 = new 试卷外部信息表();
            试卷外部信息表.ID = id;
            试卷外部信息表.名称 = 名称;
            试卷外部信息表.说明 = 说明;
            试卷外部信息表.创建人ID = 创建人ID;
            试卷外部信息表.创建时间 = 创建时间;
            试卷外部信息表.试卷状态Enum = 试卷状态Enum;
            试卷外部信息表.最新更新时间 = 最新更新时间;
            试卷外部信息表.总分 = 总分;
            试卷外部信息表.试卷内容ID = 试卷内容ID;
            试卷外部信息表.试卷类型 = 试卷类型;
            试卷外部信息表.爱考网ID = 爱考网ID;
            return 试卷外部信息表;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String 名称
        {
            get
            {
                return _名称;
            }
            set
            {
                On名称Changing(value);
                ReportPropertyChanging("名称");
                _名称 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("名称");
                On名称Changed();
            }
        }
        private global::System.String _名称;
        partial void On名称Changing(global::System.String value);
        partial void On名称Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String 说明
        {
            get
            {
                return _说明;
            }
            set
            {
                On说明Changing(value);
                ReportPropertyChanging("说明");
                _说明 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("说明");
                On说明Changed();
            }
        }
        private global::System.String _说明;
        partial void On说明Changing(global::System.String value);
        partial void On说明Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 创建人ID
        {
            get
            {
                return _创建人ID;
            }
            set
            {
                On创建人IDChanging(value);
                ReportPropertyChanging("创建人ID");
                _创建人ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("创建人ID");
                On创建人IDChanged();
            }
        }
        private global::System.Guid _创建人ID;
        partial void On创建人IDChanging(global::System.Guid value);
        partial void On创建人IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime 创建时间
        {
            get
            {
                return _创建时间;
            }
            set
            {
                On创建时间Changing(value);
                ReportPropertyChanging("创建时间");
                _创建时间 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("创建时间");
                On创建时间Changed();
            }
        }
        private global::System.DateTime _创建时间;
        partial void On创建时间Changing(global::System.DateTime value);
        partial void On创建时间Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte 试卷状态Enum
        {
            get
            {
                return _试卷状态Enum;
            }
            set
            {
                On试卷状态EnumChanging(value);
                ReportPropertyChanging("试卷状态Enum");
                _试卷状态Enum = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("试卷状态Enum");
                On试卷状态EnumChanged();
            }
        }
        private global::System.Byte _试卷状态Enum;
        partial void On试卷状态EnumChanging(global::System.Byte value);
        partial void On试卷状态EnumChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime 最新更新时间
        {
            get
            {
                return _最新更新时间;
            }
            set
            {
                On最新更新时间Changing(value);
                ReportPropertyChanging("最新更新时间");
                _最新更新时间 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("最新更新时间");
                On最新更新时间Changed();
            }
        }
        private global::System.DateTime _最新更新时间;
        partial void On最新更新时间Changing(global::System.DateTime value);
        partial void On最新更新时间Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 总分
        {
            get
            {
                return _总分;
            }
            set
            {
                On总分Changing(value);
                ReportPropertyChanging("总分");
                _总分 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("总分");
                On总分Changed();
            }
        }
        private global::System.Int32 _总分;
        partial void On总分Changing(global::System.Int32 value);
        partial void On总分Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 试卷内容ID
        {
            get
            {
                return _试卷内容ID;
            }
            set
            {
                On试卷内容IDChanging(value);
                ReportPropertyChanging("试卷内容ID");
                _试卷内容ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("试卷内容ID");
                On试卷内容IDChanged();
            }
        }
        private global::System.Guid _试卷内容ID;
        partial void On试卷内容IDChanging(global::System.Guid value);
        partial void On试卷内容IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte 试卷类型
        {
            get
            {
                return _试卷类型;
            }
            set
            {
                On试卷类型Changing(value);
                ReportPropertyChanging("试卷类型");
                _试卷类型 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("试卷类型");
                On试卷类型Changed();
            }
        }
        private global::System.Byte _试卷类型;
        partial void On试卷类型Changing(global::System.Byte value);
        partial void On试卷类型Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 爱考网ID
        {
            get
            {
                return _爱考网ID;
            }
            set
            {
                On爱考网IDChanging(value);
                ReportPropertyChanging("爱考网ID");
                _爱考网ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("爱考网ID");
                On爱考网IDChanged();
            }
        }
        private global::System.Guid _爱考网ID;
        partial void On爱考网IDChanging(global::System.Guid value);
        partial void On爱考网IDChanged();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_试卷历史_试卷", "试卷内容表")]
        public EntityCollection<试卷内容表> 试卷内容表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<试卷内容表>("LoveKaoExamModel.FK_试卷历史_试卷", "试卷内容表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<试卷内容表>("LoveKaoExamModel.FK_试卷历史_试卷", "试卷内容表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_试卷外部信息表_用户表", "用户表")]
        public 用户表 用户表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<用户表>("LoveKaoExamModel.FK_试卷外部信息表_用户表", "用户表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<用户表>("LoveKaoExamModel.FK_试卷外部信息表_用户表", "用户表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<用户表> 用户表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<用户表>("LoveKaoExamModel.FK_试卷外部信息表_用户表", "用户表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<用户表>("LoveKaoExamModel.FK_试卷外部信息表_用户表", "用户表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_修改成绩记录_试卷", "修改成绩记录")]
        public EntityCollection<修改成绩记录> 修改成绩记录
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<修改成绩记录>("LoveKaoExamModel.FK_修改成绩记录_试卷", "修改成绩记录");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<修改成绩记录>("LoveKaoExamModel.FK_修改成绩记录_试卷", "修改成绩记录", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LoveKaoExamModel", Name="试卷中大题表")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class 试卷中大题表 : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 试卷中大题表 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="试卷内容ID">试卷内容ID 属性的初始值。</param>
        /// <param name="名称">名称 属性的初始值。</param>
        /// <param name="说明">说明 属性的初始值。</param>
        /// <param name="顺序">顺序 属性的初始值。</param>
        /// <param name="多选题评分策略">多选题评分策略 属性的初始值。</param>
        public static 试卷中大题表 Create试卷中大题表(global::System.Guid id, global::System.Guid 试卷内容ID, global::System.String 名称, global::System.String 说明, global::System.Int16 顺序, global::System.Decimal 多选题评分策略)
        {
            试卷中大题表 试卷中大题表 = new 试卷中大题表();
            试卷中大题表.ID = id;
            试卷中大题表.试卷内容ID = 试卷内容ID;
            试卷中大题表.名称 = 名称;
            试卷中大题表.说明 = 说明;
            试卷中大题表.顺序 = 顺序;
            试卷中大题表.多选题评分策略 = 多选题评分策略;
            return 试卷中大题表;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 试卷内容ID
        {
            get
            {
                return _试卷内容ID;
            }
            set
            {
                On试卷内容IDChanging(value);
                ReportPropertyChanging("试卷内容ID");
                _试卷内容ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("试卷内容ID");
                On试卷内容IDChanged();
            }
        }
        private global::System.Guid _试卷内容ID;
        partial void On试卷内容IDChanging(global::System.Guid value);
        partial void On试卷内容IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String 名称
        {
            get
            {
                return _名称;
            }
            set
            {
                On名称Changing(value);
                ReportPropertyChanging("名称");
                _名称 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("名称");
                On名称Changed();
            }
        }
        private global::System.String _名称;
        partial void On名称Changing(global::System.String value);
        partial void On名称Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String 说明
        {
            get
            {
                return _说明;
            }
            set
            {
                On说明Changing(value);
                ReportPropertyChanging("说明");
                _说明 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("说明");
                On说明Changed();
            }
        }
        private global::System.String _说明;
        partial void On说明Changing(global::System.String value);
        partial void On说明Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int16 顺序
        {
            get
            {
                return _顺序;
            }
            set
            {
                On顺序Changing(value);
                ReportPropertyChanging("顺序");
                _顺序 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("顺序");
                On顺序Changed();
            }
        }
        private global::System.Int16 _顺序;
        partial void On顺序Changing(global::System.Int16 value);
        partial void On顺序Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal 多选题评分策略
        {
            get
            {
                return _多选题评分策略;
            }
            set
            {
                On多选题评分策略Changing(value);
                ReportPropertyChanging("多选题评分策略");
                _多选题评分策略 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("多选题评分策略");
                On多选题评分策略Changed();
            }
        }
        private global::System.Decimal _多选题评分策略;
        partial void On多选题评分策略Changing(global::System.Decimal value);
        partial void On多选题评分策略Changed();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_试卷题目历史_试卷题型历史", "试卷大题中试题表")]
        public EntityCollection<试卷大题中试题表> 试卷大题中试题表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<试卷大题中试题表>("LoveKaoExamModel.FK_试卷题目历史_试卷题型历史", "试卷大题中试题表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<试卷大题中试题表>("LoveKaoExamModel.FK_试卷题目历史_试卷题型历史", "试卷大题中试题表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_试卷中大题表_试卷内容表", "试卷内容表")]
        public 试卷内容表 试卷内容表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试卷内容表>("LoveKaoExamModel.FK_试卷中大题表_试卷内容表", "试卷内容表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试卷内容表>("LoveKaoExamModel.FK_试卷中大题表_试卷内容表", "试卷内容表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<试卷内容表> 试卷内容表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试卷内容表>("LoveKaoExamModel.FK_试卷中大题表_试卷内容表", "试卷内容表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<试卷内容表>("LoveKaoExamModel.FK_试卷中大题表_试卷内容表", "试卷内容表", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LoveKaoExamModel", Name="试题内容表")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class 试题内容表 : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 试题内容表 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="解题思路">解题思路 属性的初始值。</param>
        /// <param name="题干HTML">题干HTML 属性的初始值。</param>
        /// <param name="题干文本">题干文本 属性的初始值。</param>
        /// <param name="试题外部信息ID">试题外部信息ID 属性的初始值。</param>
        /// <param name="操作时间">操作时间 属性的初始值。</param>
        /// <param name="操作人ID">操作人ID 属性的初始值。</param>
        /// <param name="小题型Enum">小题型Enum 属性的初始值。</param>
        /// <param name="本题在复合题中顺序">本题在复合题中顺序 属性的初始值。</param>
        /// <param name="json字符串">Json字符串 属性的初始值。</param>
        /// <param name="爱考网ID">爱考网ID 属性的初始值。</param>
        /// <param name="难易度">难易度 属性的初始值。</param>
        public static 试题内容表 Create试题内容表(global::System.Guid id, global::System.String 解题思路, global::System.String 题干HTML, global::System.String 题干文本, global::System.Guid 试题外部信息ID, global::System.DateTime 操作时间, global::System.Guid 操作人ID, global::System.Int32 小题型Enum, global::System.Byte 本题在复合题中顺序, global::System.String json字符串, global::System.Guid 爱考网ID, global::System.Decimal 难易度)
        {
            试题内容表 试题内容表 = new 试题内容表();
            试题内容表.ID = id;
            试题内容表.解题思路 = 解题思路;
            试题内容表.题干HTML = 题干HTML;
            试题内容表.题干文本 = 题干文本;
            试题内容表.试题外部信息ID = 试题外部信息ID;
            试题内容表.操作时间 = 操作时间;
            试题内容表.操作人ID = 操作人ID;
            试题内容表.小题型Enum = 小题型Enum;
            试题内容表.本题在复合题中顺序 = 本题在复合题中顺序;
            试题内容表.Json字符串 = json字符串;
            试题内容表.爱考网ID = 爱考网ID;
            试题内容表.难易度 = 难易度;
            return 试题内容表;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String 解题思路
        {
            get
            {
                return _解题思路;
            }
            set
            {
                On解题思路Changing(value);
                ReportPropertyChanging("解题思路");
                _解题思路 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("解题思路");
                On解题思路Changed();
            }
        }
        private global::System.String _解题思路;
        partial void On解题思路Changing(global::System.String value);
        partial void On解题思路Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String 题干HTML
        {
            get
            {
                return _题干HTML;
            }
            set
            {
                On题干HTMLChanging(value);
                ReportPropertyChanging("题干HTML");
                _题干HTML = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("题干HTML");
                On题干HTMLChanged();
            }
        }
        private global::System.String _题干HTML;
        partial void On题干HTMLChanging(global::System.String value);
        partial void On题干HTMLChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String 题干文本
        {
            get
            {
                return _题干文本;
            }
            set
            {
                On题干文本Changing(value);
                ReportPropertyChanging("题干文本");
                _题干文本 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("题干文本");
                On题干文本Changed();
            }
        }
        private global::System.String _题干文本;
        partial void On题干文本Changing(global::System.String value);
        partial void On题干文本Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 试题外部信息ID
        {
            get
            {
                return _试题外部信息ID;
            }
            set
            {
                On试题外部信息IDChanging(value);
                ReportPropertyChanging("试题外部信息ID");
                _试题外部信息ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("试题外部信息ID");
                On试题外部信息IDChanged();
            }
        }
        private global::System.Guid _试题外部信息ID;
        partial void On试题外部信息IDChanging(global::System.Guid value);
        partial void On试题外部信息IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime 操作时间
        {
            get
            {
                return _操作时间;
            }
            set
            {
                On操作时间Changing(value);
                ReportPropertyChanging("操作时间");
                _操作时间 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("操作时间");
                On操作时间Changed();
            }
        }
        private global::System.DateTime _操作时间;
        partial void On操作时间Changing(global::System.DateTime value);
        partial void On操作时间Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 操作人ID
        {
            get
            {
                return _操作人ID;
            }
            set
            {
                On操作人IDChanging(value);
                ReportPropertyChanging("操作人ID");
                _操作人ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("操作人ID");
                On操作人IDChanged();
            }
        }
        private global::System.Guid _操作人ID;
        partial void On操作人IDChanging(global::System.Guid value);
        partial void On操作人IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 小题型Enum
        {
            get
            {
                return _小题型Enum;
            }
            set
            {
                On小题型EnumChanging(value);
                ReportPropertyChanging("小题型Enum");
                _小题型Enum = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("小题型Enum");
                On小题型EnumChanged();
            }
        }
        private global::System.Int32 _小题型Enum;
        partial void On小题型EnumChanging(global::System.Int32 value);
        partial void On小题型EnumChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> 父试题内容ID
        {
            get
            {
                return _父试题内容ID;
            }
            set
            {
                On父试题内容IDChanging(value);
                ReportPropertyChanging("父试题内容ID");
                _父试题内容ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("父试题内容ID");
                On父试题内容IDChanged();
            }
        }
        private Nullable<global::System.Guid> _父试题内容ID;
        partial void On父试题内容IDChanging(Nullable<global::System.Guid> value);
        partial void On父试题内容IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte 本题在复合题中顺序
        {
            get
            {
                return _本题在复合题中顺序;
            }
            set
            {
                On本题在复合题中顺序Changing(value);
                ReportPropertyChanging("本题在复合题中顺序");
                _本题在复合题中顺序 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("本题在复合题中顺序");
                On本题在复合题中顺序Changed();
            }
        }
        private global::System.Byte _本题在复合题中顺序;
        partial void On本题在复合题中顺序Changing(global::System.Byte value);
        partial void On本题在复合题中顺序Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Json字符串
        {
            get
            {
                return _Json字符串;
            }
            set
            {
                OnJson字符串Changing(value);
                ReportPropertyChanging("Json字符串");
                _Json字符串 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Json字符串");
                OnJson字符串Changed();
            }
        }
        private global::System.String _Json字符串;
        partial void OnJson字符串Changing(global::System.String value);
        partial void OnJson字符串Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 爱考网ID
        {
            get
            {
                return _爱考网ID;
            }
            set
            {
                On爱考网IDChanging(value);
                ReportPropertyChanging("爱考网ID");
                _爱考网ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("爱考网ID");
                On爱考网IDChanged();
            }
        }
        private global::System.Guid _爱考网ID;
        partial void On爱考网IDChanging(global::System.Guid value);
        partial void On爱考网IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal 难易度
        {
            get
            {
                return _难易度;
            }
            set
            {
                On难易度Changing(value);
                ReportPropertyChanging("难易度");
                _难易度 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("难易度");
                On难易度Changed();
            }
        }
        private global::System.Decimal _难易度;
        partial void On难易度Changing(global::System.Decimal value);
        partial void On难易度Changed();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_连线题答案历史_题目历史", "连线题答案表")]
        public EntityCollection<连线题答案表> 连线题答案表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<连线题答案表>("LoveKaoExamModel.FK_连线题答案历史_题目历史", "连线题答案表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<连线题答案表>("LoveKaoExamModel.FK_连线题答案历史_题目历史", "连线题答案表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_连线题选项历史_题目历史", "连线题选项表")]
        public EntityCollection<连线题选项表> 连线题选项表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<连线题选项表>("LoveKaoExamModel.FK_连线题选项历史_题目历史", "连线题选项表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<连线题选项表>("LoveKaoExamModel.FK_连线题选项历史_题目历史", "连线题选项表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_判断题答案历史_题目历史", "判断题答案表")]
        public 判断题答案表 判断题答案表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<判断题答案表>("LoveKaoExamModel.FK_判断题答案历史_题目历史", "判断题答案表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<判断题答案表>("LoveKaoExamModel.FK_判断题答案历史_题目历史", "判断题答案表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<判断题答案表> 判断题答案表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<判断题答案表>("LoveKaoExamModel.FK_判断题答案历史_题目历史", "判断题答案表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<判断题答案表>("LoveKaoExamModel.FK_判断题答案历史_题目历史", "判断题答案表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_试卷大题中试题表_试题内容表", "试卷大题中试题表")]
        public EntityCollection<试卷大题中试题表> 试卷大题中试题表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<试卷大题中试题表>("LoveKaoExamModel.FK_试卷大题中试题表_试题内容表", "试卷大题中试题表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<试卷大题中试题表>("LoveKaoExamModel.FK_试卷大题中试题表_试题内容表", "试卷大题中试题表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_空格历史_题目历史", "自由题空格表")]
        public EntityCollection<自由题空格表> 自由题空格表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<自由题空格表>("LoveKaoExamModel.FK_空格历史_题目历史", "自由题空格表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<自由题空格表>("LoveKaoExamModel.FK_空格历史_题目历史", "自由题空格表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_试题内容表_用户表", "用户表")]
        public 用户表 用户表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<用户表>("LoveKaoExamModel.FK_试题内容表_用户表", "用户表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<用户表>("LoveKaoExamModel.FK_试题内容表_用户表", "用户表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<用户表> 用户表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<用户表>("LoveKaoExamModel.FK_试题内容表_用户表", "用户表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<用户表>("LoveKaoExamModel.FK_试题内容表_用户表", "用户表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_题目历史_题目", "试题外部信息表")]
        public 试题外部信息表 试题外部信息表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试题外部信息表>("LoveKaoExamModel.FK_题目历史_题目", "试题外部信息表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试题外部信息表>("LoveKaoExamModel.FK_题目历史_题目", "试题外部信息表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<试题外部信息表> 试题外部信息表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试题外部信息表>("LoveKaoExamModel.FK_题目历史_题目", "试题外部信息表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<试题外部信息表>("LoveKaoExamModel.FK_题目历史_题目", "试题外部信息表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_题目历史_题目历史", "试题内容表1")]
        public EntityCollection<试题内容表> 试题内容表1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<试题内容表>("LoveKaoExamModel.FK_题目历史_题目历史", "试题内容表1");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<试题内容表>("LoveKaoExamModel.FK_题目历史_题目历史", "试题内容表1", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_题目历史_题目历史", "试题内容表")]
        public 试题内容表 试题内容表2
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试题内容表>("LoveKaoExamModel.FK_题目历史_题目历史", "试题内容表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试题内容表>("LoveKaoExamModel.FK_题目历史_题目历史", "试题内容表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<试题内容表> 试题内容表2Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试题内容表>("LoveKaoExamModel.FK_题目历史_题目历史", "试题内容表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<试题内容表>("LoveKaoExamModel.FK_题目历史_题目历史", "试题内容表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_问答题答案历史_题目历史", "问答题答案表")]
        public 问答题答案表 问答题答案表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<问答题答案表>("LoveKaoExamModel.FK_问答题答案历史_题目历史", "问答题答案表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<问答题答案表>("LoveKaoExamModel.FK_问答题答案历史_题目历史", "问答题答案表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<问答题答案表> 问答题答案表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<问答题答案表>("LoveKaoExamModel.FK_问答题答案历史_题目历史", "问答题答案表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<问答题答案表>("LoveKaoExamModel.FK_问答题答案历史_题目历史", "问答题答案表", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LoveKaoExamModel", Name="试题外部信息表")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class 试题外部信息表 : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 试题外部信息表 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="创建人ID">创建人ID 属性的初始值。</param>
        /// <param name="创建时间">创建时间 属性的初始值。</param>
        /// <param name="最新更新时间">最新更新时间 属性的初始值。</param>
        /// <param name="试题查询内容">试题查询内容 属性的初始值。</param>
        /// <param name="试题显示列">试题显示列 属性的初始值。</param>
        /// <param name="小题型Enum">小题型Enum 属性的初始值。</param>
        /// <param name="试题状态Enum">试题状态Enum 属性的初始值。</param>
        /// <param name="试题内容ID">试题内容ID 属性的初始值。</param>
        /// <param name="难易度">难易度 属性的初始值。</param>
        /// <param name="试题类型">试题类型 属性的初始值。</param>
        /// <param name="爱考网ID">爱考网ID 属性的初始值。</param>
        public static 试题外部信息表 Create试题外部信息表(global::System.Guid id, global::System.Guid 创建人ID, global::System.DateTime 创建时间, global::System.DateTime 最新更新时间, global::System.String 试题查询内容, global::System.String 试题显示列, global::System.Int32 小题型Enum, global::System.Byte 试题状态Enum, global::System.Guid 试题内容ID, global::System.Decimal 难易度, global::System.Byte 试题类型, global::System.Guid 爱考网ID)
        {
            试题外部信息表 试题外部信息表 = new 试题外部信息表();
            试题外部信息表.ID = id;
            试题外部信息表.创建人ID = 创建人ID;
            试题外部信息表.创建时间 = 创建时间;
            试题外部信息表.最新更新时间 = 最新更新时间;
            试题外部信息表.试题查询内容 = 试题查询内容;
            试题外部信息表.试题显示列 = 试题显示列;
            试题外部信息表.小题型Enum = 小题型Enum;
            试题外部信息表.试题状态Enum = 试题状态Enum;
            试题外部信息表.试题内容ID = 试题内容ID;
            试题外部信息表.难易度 = 难易度;
            试题外部信息表.试题类型 = 试题类型;
            试题外部信息表.爱考网ID = 爱考网ID;
            return 试题外部信息表;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 创建人ID
        {
            get
            {
                return _创建人ID;
            }
            set
            {
                On创建人IDChanging(value);
                ReportPropertyChanging("创建人ID");
                _创建人ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("创建人ID");
                On创建人IDChanged();
            }
        }
        private global::System.Guid _创建人ID;
        partial void On创建人IDChanging(global::System.Guid value);
        partial void On创建人IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime 创建时间
        {
            get
            {
                return _创建时间;
            }
            set
            {
                On创建时间Changing(value);
                ReportPropertyChanging("创建时间");
                _创建时间 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("创建时间");
                On创建时间Changed();
            }
        }
        private global::System.DateTime _创建时间;
        partial void On创建时间Changing(global::System.DateTime value);
        partial void On创建时间Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime 最新更新时间
        {
            get
            {
                return _最新更新时间;
            }
            set
            {
                On最新更新时间Changing(value);
                ReportPropertyChanging("最新更新时间");
                _最新更新时间 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("最新更新时间");
                On最新更新时间Changed();
            }
        }
        private global::System.DateTime _最新更新时间;
        partial void On最新更新时间Changing(global::System.DateTime value);
        partial void On最新更新时间Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String 试题查询内容
        {
            get
            {
                return _试题查询内容;
            }
            set
            {
                On试题查询内容Changing(value);
                ReportPropertyChanging("试题查询内容");
                _试题查询内容 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("试题查询内容");
                On试题查询内容Changed();
            }
        }
        private global::System.String _试题查询内容;
        partial void On试题查询内容Changing(global::System.String value);
        partial void On试题查询内容Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String 试题显示列
        {
            get
            {
                return _试题显示列;
            }
            set
            {
                On试题显示列Changing(value);
                ReportPropertyChanging("试题显示列");
                _试题显示列 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("试题显示列");
                On试题显示列Changed();
            }
        }
        private global::System.String _试题显示列;
        partial void On试题显示列Changing(global::System.String value);
        partial void On试题显示列Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 小题型Enum
        {
            get
            {
                return _小题型Enum;
            }
            set
            {
                On小题型EnumChanging(value);
                ReportPropertyChanging("小题型Enum");
                _小题型Enum = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("小题型Enum");
                On小题型EnumChanged();
            }
        }
        private global::System.Int32 _小题型Enum;
        partial void On小题型EnumChanging(global::System.Int32 value);
        partial void On小题型EnumChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte 试题状态Enum
        {
            get
            {
                return _试题状态Enum;
            }
            set
            {
                On试题状态EnumChanging(value);
                ReportPropertyChanging("试题状态Enum");
                _试题状态Enum = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("试题状态Enum");
                On试题状态EnumChanged();
            }
        }
        private global::System.Byte _试题状态Enum;
        partial void On试题状态EnumChanging(global::System.Byte value);
        partial void On试题状态EnumChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 试题内容ID
        {
            get
            {
                return _试题内容ID;
            }
            set
            {
                On试题内容IDChanging(value);
                ReportPropertyChanging("试题内容ID");
                _试题内容ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("试题内容ID");
                On试题内容IDChanged();
            }
        }
        private global::System.Guid _试题内容ID;
        partial void On试题内容IDChanging(global::System.Guid value);
        partial void On试题内容IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal 难易度
        {
            get
            {
                return _难易度;
            }
            set
            {
                On难易度Changing(value);
                ReportPropertyChanging("难易度");
                _难易度 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("难易度");
                On难易度Changed();
            }
        }
        private global::System.Decimal _难易度;
        partial void On难易度Changing(global::System.Decimal value);
        partial void On难易度Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte 试题类型
        {
            get
            {
                return _试题类型;
            }
            set
            {
                On试题类型Changing(value);
                ReportPropertyChanging("试题类型");
                _试题类型 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("试题类型");
                On试题类型Changed();
            }
        }
        private global::System.Byte _试题类型;
        partial void On试题类型Changing(global::System.Byte value);
        partial void On试题类型Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 爱考网ID
        {
            get
            {
                return _爱考网ID;
            }
            set
            {
                On爱考网IDChanging(value);
                ReportPropertyChanging("爱考网ID");
                _爱考网ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("爱考网ID");
                On爱考网IDChanged();
            }
        }
        private global::System.Guid _爱考网ID;
        partial void On爱考网IDChanging(global::System.Guid value);
        partial void On爱考网IDChanged();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_题目历史_题目", "试题内容表")]
        public EntityCollection<试题内容表> 试题内容表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<试题内容表>("LoveKaoExamModel.FK_题目历史_题目", "试题内容表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<试题内容表>("LoveKaoExamModel.FK_题目历史_题目", "试题内容表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_试题外部信息表_用户表", "用户表")]
        public 用户表 用户表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<用户表>("LoveKaoExamModel.FK_试题外部信息表_用户表", "用户表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<用户表>("LoveKaoExamModel.FK_试题外部信息表_用户表", "用户表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<用户表> 用户表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<用户表>("LoveKaoExamModel.FK_试题外部信息表_用户表", "用户表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<用户表>("LoveKaoExamModel.FK_试题外部信息表_用户表", "用户表", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LoveKaoExamModel", Name="所属分类表")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class 所属分类表 : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 所属分类表 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="相关信息ID">相关信息ID 属性的初始值。</param>
        /// <param name="分类名">分类名 属性的初始值。</param>
        /// <param name="操作人ID">操作人ID 属性的初始值。</param>
        /// <param name="操作时间">操作时间 属性的初始值。</param>
        /// <param name="相关类型">相关类型 属性的初始值。</param>
        public static 所属分类表 Create所属分类表(global::System.Guid id, global::System.Guid 相关信息ID, global::System.String 分类名, global::System.Guid 操作人ID, global::System.DateTime 操作时间, global::System.Byte 相关类型)
        {
            所属分类表 所属分类表 = new 所属分类表();
            所属分类表.ID = id;
            所属分类表.相关信息ID = 相关信息ID;
            所属分类表.分类名 = 分类名;
            所属分类表.操作人ID = 操作人ID;
            所属分类表.操作时间 = 操作时间;
            所属分类表.相关类型 = 相关类型;
            return 所属分类表;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 相关信息ID
        {
            get
            {
                return _相关信息ID;
            }
            set
            {
                On相关信息IDChanging(value);
                ReportPropertyChanging("相关信息ID");
                _相关信息ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("相关信息ID");
                On相关信息IDChanged();
            }
        }
        private global::System.Guid _相关信息ID;
        partial void On相关信息IDChanging(global::System.Guid value);
        partial void On相关信息IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String 分类名
        {
            get
            {
                return _分类名;
            }
            set
            {
                On分类名Changing(value);
                ReportPropertyChanging("分类名");
                _分类名 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("分类名");
                On分类名Changed();
            }
        }
        private global::System.String _分类名;
        partial void On分类名Changing(global::System.String value);
        partial void On分类名Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 操作人ID
        {
            get
            {
                return _操作人ID;
            }
            set
            {
                On操作人IDChanging(value);
                ReportPropertyChanging("操作人ID");
                _操作人ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("操作人ID");
                On操作人IDChanged();
            }
        }
        private global::System.Guid _操作人ID;
        partial void On操作人IDChanging(global::System.Guid value);
        partial void On操作人IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime 操作时间
        {
            get
            {
                return _操作时间;
            }
            set
            {
                On操作时间Changing(value);
                ReportPropertyChanging("操作时间");
                _操作时间 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("操作时间");
                On操作时间Changed();
            }
        }
        private global::System.DateTime _操作时间;
        partial void On操作时间Changing(global::System.DateTime value);
        partial void On操作时间Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte 相关类型
        {
            get
            {
                return _相关类型;
            }
            set
            {
                On相关类型Changing(value);
                ReportPropertyChanging("相关类型");
                _相关类型 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("相关类型");
                On相关类型Changed();
            }
        }
        private global::System.Byte _相关类型;
        partial void On相关类型Changing(global::System.Byte value);
        partial void On相关类型Changed();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_所属分类表_系统分类表", "系统分类表")]
        public 系统分类表 系统分类表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<系统分类表>("LoveKaoExamModel.FK_所属分类表_系统分类表", "系统分类表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<系统分类表>("LoveKaoExamModel.FK_所属分类表_系统分类表", "系统分类表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<系统分类表> 系统分类表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<系统分类表>("LoveKaoExamModel.FK_所属分类表_系统分类表", "系统分类表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<系统分类表>("LoveKaoExamModel.FK_所属分类表_系统分类表", "系统分类表", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LoveKaoExamModel", Name="问答题答案表")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class 问答题答案表 : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 问答题答案表 对象。
        /// </summary>
        /// <param name="试题内容ID">试题内容ID 属性的初始值。</param>
        /// <param name="内容">内容 属性的初始值。</param>
        public static 问答题答案表 Create问答题答案表(global::System.Guid 试题内容ID, global::System.String 内容)
        {
            问答题答案表 问答题答案表 = new 问答题答案表();
            问答题答案表.试题内容ID = 试题内容ID;
            问答题答案表.内容 = 内容;
            return 问答题答案表;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 试题内容ID
        {
            get
            {
                return _试题内容ID;
            }
            set
            {
                if (_试题内容ID != value)
                {
                    On试题内容IDChanging(value);
                    ReportPropertyChanging("试题内容ID");
                    _试题内容ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("试题内容ID");
                    On试题内容IDChanged();
                }
            }
        }
        private global::System.Guid _试题内容ID;
        partial void On试题内容IDChanging(global::System.Guid value);
        partial void On试题内容IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String 内容
        {
            get
            {
                return _内容;
            }
            set
            {
                On内容Changing(value);
                ReportPropertyChanging("内容");
                _内容 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("内容");
                On内容Changed();
            }
        }
        private global::System.String _内容;
        partial void On内容Changing(global::System.String value);
        partial void On内容Changed();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_问答题答案历史_题目历史", "试题内容表")]
        public 试题内容表 试题内容表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试题内容表>("LoveKaoExamModel.FK_问答题答案历史_题目历史", "试题内容表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试题内容表>("LoveKaoExamModel.FK_问答题答案历史_题目历史", "试题内容表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<试题内容表> 试题内容表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试题内容表>("LoveKaoExamModel.FK_问答题答案历史_题目历史", "试题内容表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<试题内容表>("LoveKaoExamModel.FK_问答题答案历史_题目历史", "试题内容表", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LoveKaoExamModel", Name="系统分类表")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class 系统分类表 : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 系统分类表 对象。
        /// </summary>
        /// <param name="分类名称">分类名称 属性的初始值。</param>
        /// <param name="操作人ID">操作人ID 属性的初始值。</param>
        /// <param name="操作时间">操作时间 属性的初始值。</param>
        /// <param name="分类类型">分类类型 属性的初始值。</param>
        /// <param name="分类类别名称">分类类别名称 属性的初始值。</param>
        /// <param name="同义词分类名称">同义词分类名称 属性的初始值。</param>
        public static 系统分类表 Create系统分类表(global::System.String 分类名称, global::System.Guid 操作人ID, global::System.DateTime 操作时间, global::System.Byte 分类类型, global::System.String 分类类别名称, global::System.String 同义词分类名称)
        {
            系统分类表 系统分类表 = new 系统分类表();
            系统分类表.分类名称 = 分类名称;
            系统分类表.操作人ID = 操作人ID;
            系统分类表.操作时间 = 操作时间;
            系统分类表.分类类型 = 分类类型;
            系统分类表.分类类别名称 = 分类类别名称;
            系统分类表.同义词分类名称 = 同义词分类名称;
            return 系统分类表;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String 分类名称
        {
            get
            {
                return _分类名称;
            }
            set
            {
                if (_分类名称 != value)
                {
                    On分类名称Changing(value);
                    ReportPropertyChanging("分类名称");
                    _分类名称 = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("分类名称");
                    On分类名称Changed();
                }
            }
        }
        private global::System.String _分类名称;
        partial void On分类名称Changing(global::System.String value);
        partial void On分类名称Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 操作人ID
        {
            get
            {
                return _操作人ID;
            }
            set
            {
                On操作人IDChanging(value);
                ReportPropertyChanging("操作人ID");
                _操作人ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("操作人ID");
                On操作人IDChanged();
            }
        }
        private global::System.Guid _操作人ID;
        partial void On操作人IDChanging(global::System.Guid value);
        partial void On操作人IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime 操作时间
        {
            get
            {
                return _操作时间;
            }
            set
            {
                On操作时间Changing(value);
                ReportPropertyChanging("操作时间");
                _操作时间 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("操作时间");
                On操作时间Changed();
            }
        }
        private global::System.DateTime _操作时间;
        partial void On操作时间Changing(global::System.DateTime value);
        partial void On操作时间Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte 分类类型
        {
            get
            {
                return _分类类型;
            }
            set
            {
                On分类类型Changing(value);
                ReportPropertyChanging("分类类型");
                _分类类型 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("分类类型");
                On分类类型Changed();
            }
        }
        private global::System.Byte _分类类型;
        partial void On分类类型Changing(global::System.Byte value);
        partial void On分类类型Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String 分类类别名称
        {
            get
            {
                return _分类类别名称;
            }
            set
            {
                On分类类别名称Changing(value);
                ReportPropertyChanging("分类类别名称");
                _分类类别名称 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("分类类别名称");
                On分类类别名称Changed();
            }
        }
        private global::System.String _分类类别名称;
        partial void On分类类别名称Changing(global::System.String value);
        partial void On分类类别名称Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String 同义词分类名称
        {
            get
            {
                return _同义词分类名称;
            }
            set
            {
                On同义词分类名称Changing(value);
                ReportPropertyChanging("同义词分类名称");
                _同义词分类名称 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("同义词分类名称");
                On同义词分类名称Changed();
            }
        }
        private global::System.String _同义词分类名称;
        partial void On同义词分类名称Changing(global::System.String value);
        partial void On同义词分类名称Changed();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_所属分类表_系统分类表", "所属分类表")]
        public EntityCollection<所属分类表> 所属分类表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<所属分类表>("LoveKaoExamModel.FK_所属分类表_系统分类表", "所属分类表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<所属分类表>("LoveKaoExamModel.FK_所属分类表_系统分类表", "所属分类表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_系统分类表_用户表", "用户表")]
        public 用户表 用户表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<用户表>("LoveKaoExamModel.FK_系统分类表_用户表", "用户表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<用户表>("LoveKaoExamModel.FK_系统分类表_用户表", "用户表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<用户表> 用户表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<用户表>("LoveKaoExamModel.FK_系统分类表_用户表", "用户表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<用户表>("LoveKaoExamModel.FK_系统分类表_用户表", "用户表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_系统分类上下级关系表_系统分类表", "系统分类上下级关系表")]
        public EntityCollection<系统分类上下级关系表> 系统分类上下级关系表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<系统分类上下级关系表>("LoveKaoExamModel.FK_系统分类上下级关系表_系统分类表", "系统分类上下级关系表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<系统分类上下级关系表>("LoveKaoExamModel.FK_系统分类上下级关系表_系统分类表", "系统分类上下级关系表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_系统分类上下级关系表_系统分类表1", "系统分类上下级关系表")]
        public EntityCollection<系统分类上下级关系表> 系统分类上下级关系表1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<系统分类上下级关系表>("LoveKaoExamModel.FK_系统分类上下级关系表_系统分类表1", "系统分类上下级关系表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<系统分类上下级关系表>("LoveKaoExamModel.FK_系统分类上下级关系表_系统分类表1", "系统分类上下级关系表", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LoveKaoExamModel", Name="系统分类上下级关系表")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class 系统分类上下级关系表 : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 系统分类上下级关系表 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="系统分类名称">系统分类名称 属性的初始值。</param>
        /// <param name="分类关系名称">分类关系名称 属性的初始值。</param>
        /// <param name="是否上级">是否上级 属性的初始值。</param>
        public static 系统分类上下级关系表 Create系统分类上下级关系表(global::System.Guid id, global::System.String 系统分类名称, global::System.String 分类关系名称, global::System.Boolean 是否上级)
        {
            系统分类上下级关系表 系统分类上下级关系表 = new 系统分类上下级关系表();
            系统分类上下级关系表.ID = id;
            系统分类上下级关系表.系统分类名称 = 系统分类名称;
            系统分类上下级关系表.分类关系名称 = 分类关系名称;
            系统分类上下级关系表.是否上级 = 是否上级;
            return 系统分类上下级关系表;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String 系统分类名称
        {
            get
            {
                return _系统分类名称;
            }
            set
            {
                On系统分类名称Changing(value);
                ReportPropertyChanging("系统分类名称");
                _系统分类名称 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("系统分类名称");
                On系统分类名称Changed();
            }
        }
        private global::System.String _系统分类名称;
        partial void On系统分类名称Changing(global::System.String value);
        partial void On系统分类名称Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String 分类关系名称
        {
            get
            {
                return _分类关系名称;
            }
            set
            {
                On分类关系名称Changing(value);
                ReportPropertyChanging("分类关系名称");
                _分类关系名称 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("分类关系名称");
                On分类关系名称Changed();
            }
        }
        private global::System.String _分类关系名称;
        partial void On分类关系名称Changing(global::System.String value);
        partial void On分类关系名称Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean 是否上级
        {
            get
            {
                return _是否上级;
            }
            set
            {
                On是否上级Changing(value);
                ReportPropertyChanging("是否上级");
                _是否上级 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("是否上级");
                On是否上级Changed();
            }
        }
        private global::System.Boolean _是否上级;
        partial void On是否上级Changing(global::System.Boolean value);
        partial void On是否上级Changed();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_系统分类上下级关系表_系统分类表", "系统分类表")]
        public 系统分类表 系统分类表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<系统分类表>("LoveKaoExamModel.FK_系统分类上下级关系表_系统分类表", "系统分类表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<系统分类表>("LoveKaoExamModel.FK_系统分类上下级关系表_系统分类表", "系统分类表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<系统分类表> 系统分类表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<系统分类表>("LoveKaoExamModel.FK_系统分类上下级关系表_系统分类表", "系统分类表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<系统分类表>("LoveKaoExamModel.FK_系统分类上下级关系表_系统分类表", "系统分类表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_系统分类上下级关系表_系统分类表1", "系统分类表")]
        public 系统分类表 系统分类表1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<系统分类表>("LoveKaoExamModel.FK_系统分类上下级关系表_系统分类表1", "系统分类表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<系统分类表>("LoveKaoExamModel.FK_系统分类上下级关系表_系统分类表1", "系统分类表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<系统分类表> 系统分类表1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<系统分类表>("LoveKaoExamModel.FK_系统分类上下级关系表_系统分类表1", "系统分类表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<系统分类表>("LoveKaoExamModel.FK_系统分类上下级关系表_系统分类表1", "系统分类表", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LoveKaoExamModel", Name="修改成绩记录")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class 修改成绩记录 : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 修改成绩记录 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="会员ID">会员ID 属性的初始值。</param>
        /// <param name="试卷ID">试卷ID 属性的初始值。</param>
        /// <param name="原来的成绩">原来的成绩 属性的初始值。</param>
        /// <param name="修改后的成绩">修改后的成绩 属性的初始值。</param>
        /// <param name="修改时间">修改时间 属性的初始值。</param>
        public static 修改成绩记录 Create修改成绩记录(global::System.Guid id, global::System.Guid 会员ID, global::System.Guid 试卷ID, global::System.Decimal 原来的成绩, global::System.Decimal 修改后的成绩, global::System.DateTime 修改时间)
        {
            修改成绩记录 修改成绩记录 = new 修改成绩记录();
            修改成绩记录.ID = id;
            修改成绩记录.会员ID = 会员ID;
            修改成绩记录.试卷ID = 试卷ID;
            修改成绩记录.原来的成绩 = 原来的成绩;
            修改成绩记录.修改后的成绩 = 修改后的成绩;
            修改成绩记录.修改时间 = 修改时间;
            return 修改成绩记录;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 会员ID
        {
            get
            {
                return _会员ID;
            }
            set
            {
                On会员IDChanging(value);
                ReportPropertyChanging("会员ID");
                _会员ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("会员ID");
                On会员IDChanged();
            }
        }
        private global::System.Guid _会员ID;
        partial void On会员IDChanging(global::System.Guid value);
        partial void On会员IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 试卷ID
        {
            get
            {
                return _试卷ID;
            }
            set
            {
                On试卷IDChanging(value);
                ReportPropertyChanging("试卷ID");
                _试卷ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("试卷ID");
                On试卷IDChanged();
            }
        }
        private global::System.Guid _试卷ID;
        partial void On试卷IDChanging(global::System.Guid value);
        partial void On试卷IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal 原来的成绩
        {
            get
            {
                return _原来的成绩;
            }
            set
            {
                On原来的成绩Changing(value);
                ReportPropertyChanging("原来的成绩");
                _原来的成绩 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("原来的成绩");
                On原来的成绩Changed();
            }
        }
        private global::System.Decimal _原来的成绩;
        partial void On原来的成绩Changing(global::System.Decimal value);
        partial void On原来的成绩Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal 修改后的成绩
        {
            get
            {
                return _修改后的成绩;
            }
            set
            {
                On修改后的成绩Changing(value);
                ReportPropertyChanging("修改后的成绩");
                _修改后的成绩 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("修改后的成绩");
                On修改后的成绩Changed();
            }
        }
        private global::System.Decimal _修改后的成绩;
        partial void On修改后的成绩Changing(global::System.Decimal value);
        partial void On修改后的成绩Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime 修改时间
        {
            get
            {
                return _修改时间;
            }
            set
            {
                On修改时间Changing(value);
                ReportPropertyChanging("修改时间");
                _修改时间 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("修改时间");
                On修改时间Changed();
            }
        }
        private global::System.DateTime _修改时间;
        partial void On修改时间Changing(global::System.DateTime value);
        partial void On修改时间Changed();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_修改成绩记录_试卷", "试卷外部信息表")]
        public 试卷外部信息表 试卷外部信息表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试卷外部信息表>("LoveKaoExamModel.FK_修改成绩记录_试卷", "试卷外部信息表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试卷外部信息表>("LoveKaoExamModel.FK_修改成绩记录_试卷", "试卷外部信息表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<试卷外部信息表> 试卷外部信息表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试卷外部信息表>("LoveKaoExamModel.FK_修改成绩记录_试卷", "试卷外部信息表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<试卷外部信息表>("LoveKaoExamModel.FK_修改成绩记录_试卷", "试卷外部信息表", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LoveKaoExamModel", Name="用户表")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class 用户表 : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 用户表 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="编号">编号 属性的初始值。</param>
        /// <param name="密码">密码 属性的初始值。</param>
        /// <param name="姓名">姓名 属性的初始值。</param>
        /// <param name="性别">性别 属性的初始值。</param>
        /// <param name="邮箱">邮箱 属性的初始值。</param>
        /// <param name="角色">角色 属性的初始值。</param>
        /// <param name="添加时间">添加时间 属性的初始值。</param>
        public static 用户表 Create用户表(global::System.Guid id, global::System.String 编号, global::System.String 密码, global::System.String 姓名, global::System.Byte 性别, global::System.String 邮箱, global::System.Byte 角色, global::System.DateTime 添加时间)
        {
            用户表 用户表 = new 用户表();
            用户表.ID = id;
            用户表.编号 = 编号;
            用户表.密码 = 密码;
            用户表.姓名 = 姓名;
            用户表.性别 = 性别;
            用户表.邮箱 = 邮箱;
            用户表.角色 = 角色;
            用户表.添加时间 = 添加时间;
            return 用户表;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String 编号
        {
            get
            {
                return _编号;
            }
            set
            {
                On编号Changing(value);
                ReportPropertyChanging("编号");
                _编号 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("编号");
                On编号Changed();
            }
        }
        private global::System.String _编号;
        partial void On编号Changing(global::System.String value);
        partial void On编号Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String 密码
        {
            get
            {
                return _密码;
            }
            set
            {
                On密码Changing(value);
                ReportPropertyChanging("密码");
                _密码 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("密码");
                On密码Changed();
            }
        }
        private global::System.String _密码;
        partial void On密码Changing(global::System.String value);
        partial void On密码Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String 姓名
        {
            get
            {
                return _姓名;
            }
            set
            {
                On姓名Changing(value);
                ReportPropertyChanging("姓名");
                _姓名 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("姓名");
                On姓名Changed();
            }
        }
        private global::System.String _姓名;
        partial void On姓名Changing(global::System.String value);
        partial void On姓名Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte 性别
        {
            get
            {
                return _性别;
            }
            set
            {
                On性别Changing(value);
                ReportPropertyChanging("性别");
                _性别 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("性别");
                On性别Changed();
            }
        }
        private global::System.Byte _性别;
        partial void On性别Changing(global::System.Byte value);
        partial void On性别Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String 邮箱
        {
            get
            {
                return _邮箱;
            }
            set
            {
                On邮箱Changing(value);
                ReportPropertyChanging("邮箱");
                _邮箱 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("邮箱");
                On邮箱Changed();
            }
        }
        private global::System.String _邮箱;
        partial void On邮箱Changing(global::System.String value);
        partial void On邮箱Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> 部门ID
        {
            get
            {
                return _部门ID;
            }
            set
            {
                On部门IDChanging(value);
                ReportPropertyChanging("部门ID");
                _部门ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("部门ID");
                On部门IDChanged();
            }
        }
        private Nullable<global::System.Guid> _部门ID;
        partial void On部门IDChanging(Nullable<global::System.Guid> value);
        partial void On部门IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte 角色
        {
            get
            {
                return _角色;
            }
            set
            {
                On角色Changing(value);
                ReportPropertyChanging("角色");
                _角色 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("角色");
                On角色Changed();
            }
        }
        private global::System.Byte _角色;
        partial void On角色Changing(global::System.Byte value);
        partial void On角色Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime 添加时间
        {
            get
            {
                return _添加时间;
            }
            set
            {
                On添加时间Changing(value);
                ReportPropertyChanging("添加时间");
                _添加时间 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("添加时间");
                On添加时间Changed();
            }
        }
        private global::System.DateTime _添加时间;
        partial void On添加时间Changing(global::System.DateTime value);
        partial void On添加时间Changed();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_绑定账号表_用户表", "绑定账号表")]
        public EntityCollection<绑定账号表> 绑定账号表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<绑定账号表>("LoveKaoExamModel.FK_绑定账号表_用户表", "绑定账号表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<绑定账号表>("LoveKaoExamModel.FK_绑定账号表_用户表", "绑定账号表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_部门表_用户表", "部门表")]
        public EntityCollection<部门表> 部门表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<部门表>("LoveKaoExamModel.FK_部门表_用户表", "部门表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<部门表>("LoveKaoExamModel.FK_部门表_用户表", "部门表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_用户表_部门表", "部门表")]
        public 部门表 部门表1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<部门表>("LoveKaoExamModel.FK_用户表_部门表", "部门表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<部门表>("LoveKaoExamModel.FK_用户表_部门表", "部门表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<部门表> 部门表1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<部门表>("LoveKaoExamModel.FK_用户表_部门表", "部门表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<部门表>("LoveKaoExamModel.FK_用户表_部门表", "部门表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_考生范围表_用户表", "考生范围表")]
        public EntityCollection<考生范围表> 考生范围表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<考生范围表>("LoveKaoExamModel.FK_考生范围表_用户表", "考生范围表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<考生范围表>("LoveKaoExamModel.FK_考生范围表_用户表", "考生范围表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_会员做过的试卷表_用户表", "考生做过的试卷表")]
        public EntityCollection<考生做过的试卷表> 考生做过的试卷表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<考生做过的试卷表>("LoveKaoExamModel.FK_会员做过的试卷表_用户表", "考生做过的试卷表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<考生做过的试卷表>("LoveKaoExamModel.FK_会员做过的试卷表_用户表", "考生做过的试卷表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_考试设置表_用户表", "考试设置表")]
        public EntityCollection<考试设置表> 考试设置表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<考试设置表>("LoveKaoExamModel.FK_考试设置表_用户表", "考试设置表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<考试设置表>("LoveKaoExamModel.FK_考试设置表_用户表", "考试设置表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_练习设置表_用户表", "练习设置表")]
        public EntityCollection<练习设置表> 练习设置表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<练习设置表>("LoveKaoExamModel.FK_练习设置表_用户表", "练习设置表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<练习设置表>("LoveKaoExamModel.FK_练习设置表_用户表", "练习设置表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_试卷内容表_用户表", "试卷内容表")]
        public EntityCollection<试卷内容表> 试卷内容表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<试卷内容表>("LoveKaoExamModel.FK_试卷内容表_用户表", "试卷内容表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<试卷内容表>("LoveKaoExamModel.FK_试卷内容表_用户表", "试卷内容表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_试卷内容表_用户表1", "试卷内容表")]
        public EntityCollection<试卷内容表> 试卷内容表1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<试卷内容表>("LoveKaoExamModel.FK_试卷内容表_用户表1", "试卷内容表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<试卷内容表>("LoveKaoExamModel.FK_试卷内容表_用户表1", "试卷内容表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_试卷外部信息表_用户表", "试卷外部信息表")]
        public EntityCollection<试卷外部信息表> 试卷外部信息表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<试卷外部信息表>("LoveKaoExamModel.FK_试卷外部信息表_用户表", "试卷外部信息表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<试卷外部信息表>("LoveKaoExamModel.FK_试卷外部信息表_用户表", "试卷外部信息表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_试题内容表_用户表", "试题内容表")]
        public EntityCollection<试题内容表> 试题内容表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<试题内容表>("LoveKaoExamModel.FK_试题内容表_用户表", "试题内容表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<试题内容表>("LoveKaoExamModel.FK_试题内容表_用户表", "试题内容表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_试题外部信息表_用户表", "试题外部信息表")]
        public EntityCollection<试题外部信息表> 试题外部信息表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<试题外部信息表>("LoveKaoExamModel.FK_试题外部信息表_用户表", "试题外部信息表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<试题外部信息表>("LoveKaoExamModel.FK_试题外部信息表_用户表", "试题外部信息表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_系统分类表_用户表", "系统分类表")]
        public EntityCollection<系统分类表> 系统分类表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<系统分类表>("LoveKaoExamModel.FK_系统分类表_用户表", "系统分类表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<系统分类表>("LoveKaoExamModel.FK_系统分类表_用户表", "系统分类表", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LoveKaoExamModel", Name="自由题空格表")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class 自由题空格表 : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 自由题空格表 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="试题内容ID">试题内容ID 属性的初始值。</param>
        /// <param name="顺序">顺序 属性的初始值。</param>
        /// <param name="空格类型">空格类型 属性的初始值。</param>
        public static 自由题空格表 Create自由题空格表(global::System.Guid id, global::System.Guid 试题内容ID, global::System.Byte 顺序, global::System.Byte 空格类型)
        {
            自由题空格表 自由题空格表 = new 自由题空格表();
            自由题空格表.ID = id;
            自由题空格表.试题内容ID = 试题内容ID;
            自由题空格表.顺序 = 顺序;
            自由题空格表.空格类型 = 空格类型;
            return 自由题空格表;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 试题内容ID
        {
            get
            {
                return _试题内容ID;
            }
            set
            {
                On试题内容IDChanging(value);
                ReportPropertyChanging("试题内容ID");
                _试题内容ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("试题内容ID");
                On试题内容IDChanged();
            }
        }
        private global::System.Guid _试题内容ID;
        partial void On试题内容IDChanging(global::System.Guid value);
        partial void On试题内容IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte 顺序
        {
            get
            {
                return _顺序;
            }
            set
            {
                On顺序Changing(value);
                ReportPropertyChanging("顺序");
                _顺序 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("顺序");
                On顺序Changed();
            }
        }
        private global::System.Byte _顺序;
        partial void On顺序Changing(global::System.Byte value);
        partial void On顺序Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> 自由题选项组ID
        {
            get
            {
                return _自由题选项组ID;
            }
            set
            {
                On自由题选项组IDChanging(value);
                ReportPropertyChanging("自由题选项组ID");
                _自由题选项组ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("自由题选项组ID");
                On自由题选项组IDChanged();
            }
        }
        private Nullable<global::System.Guid> _自由题选项组ID;
        partial void On自由题选项组IDChanging(Nullable<global::System.Guid> value);
        partial void On自由题选项组IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte 空格类型
        {
            get
            {
                return _空格类型;
            }
            set
            {
                On空格类型Changing(value);
                ReportPropertyChanging("空格类型");
                _空格类型 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("空格类型");
                On空格类型Changed();
            }
        }
        private global::System.Byte _空格类型;
        partial void On空格类型Changing(global::System.Byte value);
        partial void On空格类型Changed();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_会员多空选择题回答_空格历史", "考生多空选择题回答表")]
        public EntityCollection<考生多空选择题回答表> 考生多空选择题回答表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<考生多空选择题回答表>("LoveKaoExamModel.FK_会员多空选择题回答_空格历史", "考生多空选择题回答表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<考生多空选择题回答表>("LoveKaoExamModel.FK_会员多空选择题回答_空格历史", "考生多空选择题回答表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_会员填空题回答表_自由题空格表", "考生填空题回答表")]
        public EntityCollection<考生填空题回答表> 考生填空题回答表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<考生填空题回答表>("LoveKaoExamModel.FK_会员填空题回答表_自由题空格表", "考生填空题回答表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<考生填空题回答表>("LoveKaoExamModel.FK_会员填空题回答表_自由题空格表", "考生填空题回答表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_会员选词填空回答_空格历史", "考生选词填空回答表")]
        public EntityCollection<考生选词填空回答表> 考生选词填空回答表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<考生选词填空回答表>("LoveKaoExamModel.FK_会员选词填空回答_空格历史", "考生选词填空回答表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<考生选词填空回答表>("LoveKaoExamModel.FK_会员选词填空回答_空格历史", "考生选词填空回答表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_空格历史_题目历史", "试题内容表")]
        public 试题内容表 试题内容表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试题内容表>("LoveKaoExamModel.FK_空格历史_题目历史", "试题内容表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试题内容表>("LoveKaoExamModel.FK_空格历史_题目历史", "试题内容表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<试题内容表> 试题内容表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<试题内容表>("LoveKaoExamModel.FK_空格历史_题目历史", "试题内容表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<试题内容表>("LoveKaoExamModel.FK_空格历史_题目历史", "试题内容表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_空格答案历史_空格历史", "自由题选项空格答案表")]
        public EntityCollection<自由题选项空格答案表> 自由题选项空格答案表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<自由题选项空格答案表>("LoveKaoExamModel.FK_空格答案历史_空格历史", "自由题选项空格答案表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<自由题选项空格答案表>("LoveKaoExamModel.FK_空格答案历史_空格历史", "自由题选项空格答案表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_填空题答案历史_空格历史", "自由题填空答案表")]
        public EntityCollection<自由题填空答案表> 自由题填空答案表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<自由题填空答案表>("LoveKaoExamModel.FK_填空题答案历史_空格历史", "自由题填空答案表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<自由题填空答案表>("LoveKaoExamModel.FK_填空题答案历史_空格历史", "自由题填空答案表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_自由题空格表_自由题选项组表", "自由题选项组表")]
        public 自由题选项组表 自由题选项组表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<自由题选项组表>("LoveKaoExamModel.FK_自由题空格表_自由题选项组表", "自由题选项组表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<自由题选项组表>("LoveKaoExamModel.FK_自由题空格表_自由题选项组表", "自由题选项组表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<自由题选项组表> 自由题选项组表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<自由题选项组表>("LoveKaoExamModel.FK_自由题空格表_自由题选项组表", "自由题选项组表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<自由题选项组表>("LoveKaoExamModel.FK_自由题空格表_自由题选项组表", "自由题选项组表", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LoveKaoExamModel", Name="自由题填空答案表")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class 自由题填空答案表 : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 自由题填空答案表 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="自由题空格ID">自由题空格ID 属性的初始值。</param>
        /// <param name="该空答案">该空答案 属性的初始值。</param>
        /// <param name="顺序">顺序 属性的初始值。</param>
        public static 自由题填空答案表 Create自由题填空答案表(global::System.Guid id, global::System.Guid 自由题空格ID, global::System.String 该空答案, global::System.Byte 顺序)
        {
            自由题填空答案表 自由题填空答案表 = new 自由题填空答案表();
            自由题填空答案表.ID = id;
            自由题填空答案表.自由题空格ID = 自由题空格ID;
            自由题填空答案表.该空答案 = 该空答案;
            自由题填空答案表.顺序 = 顺序;
            return 自由题填空答案表;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 自由题空格ID
        {
            get
            {
                return _自由题空格ID;
            }
            set
            {
                On自由题空格IDChanging(value);
                ReportPropertyChanging("自由题空格ID");
                _自由题空格ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("自由题空格ID");
                On自由题空格IDChanged();
            }
        }
        private global::System.Guid _自由题空格ID;
        partial void On自由题空格IDChanging(global::System.Guid value);
        partial void On自由题空格IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String 该空答案
        {
            get
            {
                return _该空答案;
            }
            set
            {
                On该空答案Changing(value);
                ReportPropertyChanging("该空答案");
                _该空答案 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("该空答案");
                On该空答案Changed();
            }
        }
        private global::System.String _该空答案;
        partial void On该空答案Changing(global::System.String value);
        partial void On该空答案Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte 顺序
        {
            get
            {
                return _顺序;
            }
            set
            {
                On顺序Changing(value);
                ReportPropertyChanging("顺序");
                _顺序 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("顺序");
                On顺序Changed();
            }
        }
        private global::System.Byte _顺序;
        partial void On顺序Changing(global::System.Byte value);
        partial void On顺序Changed();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_填空题答案历史_空格历史", "自由题空格表")]
        public 自由题空格表 自由题空格表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<自由题空格表>("LoveKaoExamModel.FK_填空题答案历史_空格历史", "自由题空格表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<自由题空格表>("LoveKaoExamModel.FK_填空题答案历史_空格历史", "自由题空格表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<自由题空格表> 自由题空格表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<自由题空格表>("LoveKaoExamModel.FK_填空题答案历史_空格历史", "自由题空格表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<自由题空格表>("LoveKaoExamModel.FK_填空题答案历史_空格历史", "自由题空格表", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LoveKaoExamModel", Name="自由题选项表")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class 自由题选项表 : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 自由题选项表 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="选项内容HTML">选项内容HTML 属性的初始值。</param>
        /// <param name="选项内容文本">选项内容文本 属性的初始值。</param>
        /// <param name="顺序">顺序 属性的初始值。</param>
        /// <param name="自由题选项组ID">自由题选项组ID 属性的初始值。</param>
        public static 自由题选项表 Create自由题选项表(global::System.Guid id, global::System.String 选项内容HTML, global::System.String 选项内容文本, global::System.Byte 顺序, global::System.Guid 自由题选项组ID)
        {
            自由题选项表 自由题选项表 = new 自由题选项表();
            自由题选项表.ID = id;
            自由题选项表.选项内容HTML = 选项内容HTML;
            自由题选项表.选项内容文本 = 选项内容文本;
            自由题选项表.顺序 = 顺序;
            自由题选项表.自由题选项组ID = 自由题选项组ID;
            return 自由题选项表;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String 选项内容HTML
        {
            get
            {
                return _选项内容HTML;
            }
            set
            {
                On选项内容HTMLChanging(value);
                ReportPropertyChanging("选项内容HTML");
                _选项内容HTML = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("选项内容HTML");
                On选项内容HTMLChanged();
            }
        }
        private global::System.String _选项内容HTML;
        partial void On选项内容HTMLChanging(global::System.String value);
        partial void On选项内容HTMLChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String 选项内容文本
        {
            get
            {
                return _选项内容文本;
            }
            set
            {
                On选项内容文本Changing(value);
                ReportPropertyChanging("选项内容文本");
                _选项内容文本 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("选项内容文本");
                On选项内容文本Changed();
            }
        }
        private global::System.String _选项内容文本;
        partial void On选项内容文本Changing(global::System.String value);
        partial void On选项内容文本Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte 顺序
        {
            get
            {
                return _顺序;
            }
            set
            {
                On顺序Changing(value);
                ReportPropertyChanging("顺序");
                _顺序 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("顺序");
                On顺序Changed();
            }
        }
        private global::System.Byte _顺序;
        partial void On顺序Changing(global::System.Byte value);
        partial void On顺序Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 自由题选项组ID
        {
            get
            {
                return _自由题选项组ID;
            }
            set
            {
                On自由题选项组IDChanging(value);
                ReportPropertyChanging("自由题选项组ID");
                _自由题选项组ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("自由题选项组ID");
                On自由题选项组IDChanged();
            }
        }
        private global::System.Guid _自由题选项组ID;
        partial void On自由题选项组IDChanging(global::System.Guid value);
        partial void On自由题选项组IDChanged();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_会员多空选择题回答_选项历史", "考生多空选择题回答表")]
        public EntityCollection<考生多空选择题回答表> 考生多空选择题回答表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<考生多空选择题回答表>("LoveKaoExamModel.FK_会员多空选择题回答_选项历史", "考生多空选择题回答表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<考生多空选择题回答表>("LoveKaoExamModel.FK_会员多空选择题回答_选项历史", "考生多空选择题回答表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_会员多选题回答_选项历史", "考生多选题回答表")]
        public EntityCollection<考生多选题回答表> 考生多选题回答表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<考生多选题回答表>("LoveKaoExamModel.FK_会员多选题回答_选项历史", "考生多选题回答表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<考生多选题回答表>("LoveKaoExamModel.FK_会员多选题回答_选项历史", "考生多选题回答表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_会员选词填空回答_选项历史", "考生选词填空回答表")]
        public EntityCollection<考生选词填空回答表> 考生选词填空回答表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<考生选词填空回答表>("LoveKaoExamModel.FK_会员选词填空回答_选项历史", "考生选词填空回答表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<考生选词填空回答表>("LoveKaoExamModel.FK_会员选词填空回答_选项历史", "考生选词填空回答表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_空格答案历史_选项历史", "自由题选项空格答案表")]
        public EntityCollection<自由题选项空格答案表> 自由题选项空格答案表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<自由题选项空格答案表>("LoveKaoExamModel.FK_空格答案历史_选项历史", "自由题选项空格答案表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<自由题选项空格答案表>("LoveKaoExamModel.FK_空格答案历史_选项历史", "自由题选项空格答案表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_自由题选项表_自由题选项组表", "自由题选项组表")]
        public 自由题选项组表 自由题选项组表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<自由题选项组表>("LoveKaoExamModel.FK_自由题选项表_自由题选项组表", "自由题选项组表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<自由题选项组表>("LoveKaoExamModel.FK_自由题选项表_自由题选项组表", "自由题选项组表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<自由题选项组表> 自由题选项组表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<自由题选项组表>("LoveKaoExamModel.FK_自由题选项表_自由题选项组表", "自由题选项组表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<自由题选项组表>("LoveKaoExamModel.FK_自由题选项表_自由题选项组表", "自由题选项组表", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LoveKaoExamModel", Name="自由题选项空格答案表")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class 自由题选项空格答案表 : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 自由题选项空格答案表 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="自由题空格ID">自由题空格ID 属性的初始值。</param>
        /// <param name="自由题选项ID">自由题选项ID 属性的初始值。</param>
        /// <param name="顺序">顺序 属性的初始值。</param>
        public static 自由题选项空格答案表 Create自由题选项空格答案表(global::System.Guid id, global::System.Guid 自由题空格ID, global::System.Guid 自由题选项ID, global::System.Byte 顺序)
        {
            自由题选项空格答案表 自由题选项空格答案表 = new 自由题选项空格答案表();
            自由题选项空格答案表.ID = id;
            自由题选项空格答案表.自由题空格ID = 自由题空格ID;
            自由题选项空格答案表.自由题选项ID = 自由题选项ID;
            自由题选项空格答案表.顺序 = 顺序;
            return 自由题选项空格答案表;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 自由题空格ID
        {
            get
            {
                return _自由题空格ID;
            }
            set
            {
                On自由题空格IDChanging(value);
                ReportPropertyChanging("自由题空格ID");
                _自由题空格ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("自由题空格ID");
                On自由题空格IDChanged();
            }
        }
        private global::System.Guid _自由题空格ID;
        partial void On自由题空格IDChanging(global::System.Guid value);
        partial void On自由题空格IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid 自由题选项ID
        {
            get
            {
                return _自由题选项ID;
            }
            set
            {
                On自由题选项IDChanging(value);
                ReportPropertyChanging("自由题选项ID");
                _自由题选项ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("自由题选项ID");
                On自由题选项IDChanged();
            }
        }
        private global::System.Guid _自由题选项ID;
        partial void On自由题选项IDChanging(global::System.Guid value);
        partial void On自由题选项IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte 顺序
        {
            get
            {
                return _顺序;
            }
            set
            {
                On顺序Changing(value);
                ReportPropertyChanging("顺序");
                _顺序 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("顺序");
                On顺序Changed();
            }
        }
        private global::System.Byte _顺序;
        partial void On顺序Changing(global::System.Byte value);
        partial void On顺序Changed();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_空格答案历史_空格历史", "自由题空格表")]
        public 自由题空格表 自由题空格表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<自由题空格表>("LoveKaoExamModel.FK_空格答案历史_空格历史", "自由题空格表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<自由题空格表>("LoveKaoExamModel.FK_空格答案历史_空格历史", "自由题空格表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<自由题空格表> 自由题空格表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<自由题空格表>("LoveKaoExamModel.FK_空格答案历史_空格历史", "自由题空格表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<自由题空格表>("LoveKaoExamModel.FK_空格答案历史_空格历史", "自由题空格表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_空格答案历史_选项历史", "自由题选项表")]
        public 自由题选项表 自由题选项表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<自由题选项表>("LoveKaoExamModel.FK_空格答案历史_选项历史", "自由题选项表").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<自由题选项表>("LoveKaoExamModel.FK_空格答案历史_选项历史", "自由题选项表").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<自由题选项表> 自由题选项表Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<自由题选项表>("LoveKaoExamModel.FK_空格答案历史_选项历史", "自由题选项表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<自由题选项表>("LoveKaoExamModel.FK_空格答案历史_选项历史", "自由题选项表", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LoveKaoExamModel", Name="自由题选项组表")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class 自由题选项组表 : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 自由题选项组表 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        public static 自由题选项组表 Create自由题选项组表(global::System.Guid id)
        {
            自由题选项组表 自由题选项组表 = new 自由题选项组表();
            自由题选项组表.ID = id;
            return 自由题选项组表;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_自由题空格表_自由题选项组表", "自由题空格表")]
        public EntityCollection<自由题空格表> 自由题空格表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<自由题空格表>("LoveKaoExamModel.FK_自由题空格表_自由题选项组表", "自由题空格表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<自由题空格表>("LoveKaoExamModel.FK_自由题空格表_自由题选项组表", "自由题空格表", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LoveKaoExamModel", "FK_自由题选项表_自由题选项组表", "自由题选项表")]
        public EntityCollection<自由题选项表> 自由题选项表
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<自由题选项表>("LoveKaoExamModel.FK_自由题选项表_自由题选项组表", "自由题选项表");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<自由题选项表>("LoveKaoExamModel.FK_自由题选项表_自由题选项组表", "自由题选项表", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
